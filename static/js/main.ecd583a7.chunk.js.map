{"version":3,"sources":["pages/Overview.mdx","hooks/useForceUpdate.ts","components/RenderCounter.tsx","examples/components/ChildComponents.tsx","examples/components/Components.tsx","pages/Components.mdx","examples/components/ClassComponent.tsx","pages/ClassComponent.mdx","examples/components/PureComponent.tsx","pages/PureComponent.mdx","examples/components/FunctionComponent.tsx","pages/FunctionComponent.mdx","examples/components/MethodComponent.tsx","pages/MethodComponent.mdx","pages/Hooks.mdx","examples/hooks/properUseCallback.tsx","examples/hooks/uselessUseCallback.tsx","pages/UseCallback.mdx","core/utils.ts","examples/hooks/useEffect.tsx","pages/UseEffect.mdx","pages/UseState.mdx","examples/context/ContextChangedBits.tsx","examples/context/ContextMemoized.tsx","examples/context/ContextSeparate.tsx","examples/context/ContextSelector.tsx","examples/context/ContextUnmemoized.tsx","pages/Context.mdx","pages/Immutability.mdx","pages/Links.mdx","pages/GenericHookGuides.mdx","pages/HooksRenderProps.mdx","pages/Memoization.mdx","examples/components/Memoization.tsx","pages/ReactMemo.mdx","app.tsx","components/mdx/index.ts","components/mdx/Code.tsx","serviceWorker.ts","index.tsx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","to","isMDXComponent","useForceValueUpdate","changeProps","React","useState","value","setIt","useForceUpdate","RenderCounter","counter","useRef","current","style","borderStyle","borderWidth","borderColor","color","position","width","marginTop","marginBottom","right","top","background","fontFamily","padding","children","ChildClassComponent","this","Component","ChildClassComponentMemoized","nextProps","ChildClassComponentWithObjectPropsStr","obj","str","ChildClassComponentWithObjectPropsNum","num","ChildClassComponentWithObjectPropsMemoizedStr","ChildClassComponentWithObjectPropsMemoizedNum","ChildPureComponent","PureComponent","ChildPureComponentMemoized","ChildPureComponentWithObjectPropsStr","ChildPureComponentWithObjectPropsNum","ChildPureComponentWithObjectPropsMemoizedStr","ChildPureComponentWithObjectPropsMemoizedNum","ChildFunctionComponent","ChildFunctionComponentMemoized","memo","ChildFunctionComponentWithObjectPropsStr","ChildFunctionComponentWithObjectPropsNum","ChildFunctionComponentWithObjectPropsMemoizedStr","prevProps","ChildFunctionComponentWithObjectPropsMemoizedNum","Components","update","isMemoized","onClick","PlainPropsClassComponent","ObjectPropsClassComponent","initialValue","prevState","Math","round","random","note","PlainPropsPureComponent","ObjectPropsPureComponent","PlainPropsFunctionComponent","ObjectPropsFunctionComponent","ClassComponentWithMethodComponents","strMethodComponent","numMethodComponent","StrComponent","NumComponent","ClassComponent","Wrapper","isCorrect","setNum","setStr","prev","parseInt","MemoComponent","memoized","ProperUseColback","memoizedCallback","useCallback","onNoop","SampleComponent","UselessUseCallback","sleep","ms","Promise","resolve","setTimeout","UseEffectAsync","data","setData","useEffect","asyncOp","a","updatedData","UseEffectAsyncWithCleanup","cancel","UseEffectAsyncExample","setCounter","UseEffectAsyncWithCleanupExample","Context","createContext","foo","bar","Provider","JSON","stringify","ConsumerFoo","Consumer","ConsumerBar","Comp","count","setCount","useMemo","useContext","ContextMemoized","FooContext","BarContext","ContextSeparate","useContextSelector","v","ContextSelector","ContextUnmemoized","ContextChangedBits","MemoizedComponent","ctx","ChildFunctionComponentMemoizedWithContext","imInterestedInThisChange","imNotInterestedInThisChange","ChildFunctionComponentWithContext","App","className","Suspense","fallback","path","element","href","src","alt","code","language","replace","defaultProps","theme","undefined","tokens","getLineProps","getTokenProps","map","line","i","key","token","Boolean","window","location","hostname","match","Typography","githubTheme","injectStyles","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQASMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kCACA,4PAIA,oCAAmB,0BAAYC,WAAW,MAAvB,eACnB,8BAAa,0BAAYA,WAAW,KAAvB,cAAb,kEAAsI,sBAAQA,WAAW,KAAnB,sBAAtI,oEAC4D,0BAAYA,WAAW,KAAvB,cAD5D,4DAGA,oCACA,iDAAgC,YAAC,IAAD,CAAMC,GAAG,cAAcF,QAAQ,QAA/B,cAAhC,wGAEA,+BACA,qEAAoD,YAAC,IAAD,CAAME,GAAG,SAASF,QAAQ,QAA1B,SAApD,4CACA,iCACA,YAAC,IAAD,CAAME,GAAG,WAAWF,QAAQ,QAA5B,WAjBK,iNAoBL,sCACA,uCAAsB,YAAC,IAAD,CAAME,GAAG,gBAAgBF,QAAQ,QAAjC,gBAAtB,uDACA,+BACA,4BAAW,YAAC,IAAD,CAAME,GAAG,SAASF,QAAQ,QAA1B,SAAX,kGAKJH,EAAWM,gBAAiB,E,WC3CfC,EAAsB,SACjCC,GAEA,IACA,EAAuBC,IAAMC,SADR,GACrB,mBAAOC,EAAP,KAAcC,EAAd,KAEA,MAAO,CAAC,kBAAMA,EAAMD,EAAQ,IAAIH,EAAcG,EAHzB,IAMVE,EAAiB,WAC5B,MAAkBJ,IAAMC,WAAfE,EAAT,oBAEA,OAAO,kBAAMA,EAAM,M,QC6BNE,EAnCqC,SAACZ,GACnD,IAAMa,EAAUN,IAAMO,OAAe,GAGrC,OAFAD,EAAQE,SAAW,EAGjB,yBACEC,MAAK,2BACAhB,EAAMgB,OADN,IAEHC,YAAa,QACbC,YAAa,EACbC,YAAanB,EAAMoB,MACnBC,SAAU,WACVC,MAAO,MACPC,UAAW,EACXC,aAAc,KAGhB,yBACER,MAAO,CACLK,SAAU,WACVI,MAAO,EACPC,IAAK,EACLC,WAAY,QACZP,MAAO,QACPQ,WAAY,YACZC,QAAS,IARb,iBAWiBhB,EAAQE,SAExBf,EAAM8B,W,4BClCAC,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAeX,MAAM,OAArB,0BAC0BY,KAAKhC,MAAMS,WAJ3C,GAAyCwB,aAU5BC,EAAb,2KACE,SAAsBC,GACpB,OAAOA,EAAU1B,QAAUuB,KAAKhC,MAAMS,QAF1C,oBAKE,WACE,OACE,kBAAC,EAAD,CAAeW,MAAM,OAArB,yBACwB,4CADxB,KACoDY,KAAKhC,MAAMS,WARrE,GAAiDwB,aAcpCG,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAehB,MAAM,OAArB,0BAC0BY,KAAKhC,MAAMqC,IAAIC,SAJ/C,GAA2DL,aAU9CM,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAenB,MAAM,OAArB,0BAC0BY,KAAKhC,MAAMqC,IAAIG,SAJ/C,GAA2DP,aAU9CQ,EAAb,2KACE,SAAsBN,GACpB,OAAOA,EAAUE,IAAIC,MAAQN,KAAKhC,MAAMqC,IAAIC,MAFhD,oBAKE,WACE,OACE,kBAAC,EAAD,CAAelB,MAAM,OAArB,yBACwB,4CADxB,KACoDY,KAAKhC,MAAMqC,IAAIC,SARzE,GAAmEL,aActDS,EAAb,2KACE,SAAsBP,GACpB,OAAOA,EAAUE,IAAIG,MAAQR,KAAKhC,MAAMqC,IAAIG,MAFhD,oBAKE,WACE,OACE,kBAAC,EAAD,CAAepB,MAAM,OAArB,yBACwB,4CADxB,KACoDY,KAAKhC,MAAMqC,IAAIG,SARzE,GAAmEP,aActDU,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAevB,MAAM,SAArB,yBACyBY,KAAKhC,MAAMS,WAJ1C,GAAwCmC,iBAU3BC,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAezB,MAAM,SAArB,wBACuB,4CADvB,KACmDY,KAAKhC,MAAMS,WAJpE,GAAgDmC,iBAUnCE,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAe1B,MAAM,SAArB,yBACyBY,KAAKhC,MAAMqC,IAAIC,SAJ9C,GAA0DM,iBAU7CG,EAAb,4JACE,WACE,OACE,kBAAC,EAAD,CAAe3B,MAAM,SAArB,yBACyBY,KAAKhC,MAAMqC,IAAIG,SAJ9C,GAA0DI,iBAU7CI,EAAb,2KACE,SAAsBb,GACpB,OAAOA,EAAUE,IAAIC,MAAQN,KAAKhC,MAAMqC,IAAIC,MAFhD,oBAKE,WACE,OACE,kBAAC,EAAD,CAAelB,MAAM,SAArB,wBACuB,4CADvB,KACmDY,KAAKhC,MAAMqC,IAAIC,SARxE,GAAkEM,iBAcrDK,EAAb,2KACE,SAAsBd,GACpB,OAAOA,EAAUE,IAAIG,MAAQR,KAAKhC,MAAMqC,IAAIG,MAFhD,oBAKE,WACE,OACE,kBAAC,EAAD,CAAepB,MAAM,SAArB,wBACuB,4CADvB,KACmDY,KAAKhC,MAAMqC,IAAIG,SARxE,GAAkEI,iBAcrDM,EAAoD,SAC/DlD,GAEA,OACE,kBAAC,EAAD,CAAeoB,MAAM,QAArB,6BAC6BpB,EAAMS,QAK1B0C,EACX5C,IAAM6C,MAAgC,SAACpD,GACrC,OACE,kBAAC,EAAD,CAAeoB,MAAM,QAArB,4BAC2B,4CAD3B,KACuDpB,EAAMS,UAKtD4C,EAET,SAACrD,GACH,OACE,kBAAC,EAAD,CAAeoB,MAAM,QAArB,6BAC6BpB,EAAMqC,IAAIC,MAK9BgB,EAET,SAACtD,GACH,OACE,kBAAC,EAAD,CAAeoB,MAAM,QAArB,6BAC6BpB,EAAMqC,IAAIG,MAK9Be,EACXhD,IAAM6C,MACJ,SAACpD,GACC,OACE,kBAAC,EAAD,CAAeoB,MAAM,QAArB,4BAC2B,4CAD3B,KACuDpB,EAAMqC,IAAIC,QAIrE,SAACkB,EAAmCrB,GAClC,OAAOqB,EAAUnB,IAAIC,MAAQH,EAAUE,IAAIC,OAIpCmB,EACXlD,IAAM6C,MACJ,SAACpD,GACC,OACE,kBAAC,EAAD,CAAeoB,MAAM,QAArB,4BAC2B,4CAD3B,KACuDpB,EAAMqC,IAAIG,QAIrE,SAACgB,EAAmCrB,GAClC,OAAOqB,EAAUnB,IAAIG,MAAQL,EAAUE,IAAIG,OCzKlCkB,EAzBI,SAAC1D,GAClB,MAAwBK,EAAoBL,EAAMM,aAAlD,mBAAOqD,EAAP,KAAelD,EAAf,KAEA,OACE,kBAAC,EAAD,CAAeW,MAAM,SACnB,wCACCpB,EAAM4D,WACL,oCACE,kBAAC,EAAD,CAA6BnD,MAAOA,IACpC,kBAAC,EAAD,CAA4BA,MAAOA,IACnC,kBAAC0C,EAAD,CAAgC1C,MAAOA,KAGzC,oCACE,kBAAC,EAAD,CAAqBA,MAAOA,IAC5B,kBAAC,EAAD,CAAoBA,MAAOA,IAC3B,kBAAC,EAAD,CAAwBA,MAAOA,KAGnC,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAMF,MAAvB,oB,iBCvBA9D,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,oCACA,qBAAG,iBAAGC,WAAW,IACb,KAAQ,iDACP,0BAAYA,WAAW,KAAvB,oBAFL,iBAEsF,iBAAGA,WAAW,IAChG,KAAQ,qDAD0E,uBAFtF,KAKA,iFACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,mBAApB,kCAA2G,iBAAGA,WAAW,KACrH,KAAQ,0DACP,0BAAYA,WAAW,KAAvB,oBAFL,kMAGA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,kBAApB,UAAkF,iBAAGA,WAAW,KAC5F,KAAQ,8DACP,0BAAYA,WAAW,KAAvB,wBAFL,sBAE+F,0BAAYA,WAAW,MAAvB,mBAF/F,yCAEqM,0BAAYA,WAAW,MAAvB,mBAFrM,2BAEwR,0BAAYA,WAAW,MAAvB,2BAFxR,SAEsW,0BAAYA,WAAW,MAAvB,uBAFtW,yBAEgc,sBAAQA,WAAW,MAAnB,qCAFhc,KAGA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,sBAApB,UAAsF,iBAAGA,WAAW,KAChG,KAAQ,oFACP,0BAAYA,WAAW,KAAvB,4BAFL,2FAGA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,oBAApB,UAAoF,YAAC,IAAD,CAAMC,GAAG,oBAAoBF,QAAQ,QAArC,oBAApF,8EAEF,4DACA,4FAA2E,0BAAYC,WAAW,KAAvB,SAA3E,QAAqI,0BAAYA,WAAW,KAAvB,YAArI,+CAAyO,sBAAQA,WAAW,KAAnB,mCAAzO,KACA,2BAAU,0BAAYA,WAAW,KAAvB,QAAV,6FACA,YAAC,EAAD,CAAY0D,YAAY,EAAOtD,aAAa,EAAOL,QAAQ,eAC3D,yDACA,2BAAU,sBAAQC,WAAW,KAAnB,6BAAV,kCAA0G,0BAAYA,WAAW,KAAvB,SAA1G,KAAiK,0BAAYA,WAAW,KAAvB,QAAjK,KAAuN,0BAAYA,WAAW,KAAvB,YAAvN,2CAAuT,sBAAQA,WAAW,KAAnB,YAAvT,cACA,YAAC,EAAD,CAAY0D,YAAY,EAAOtD,aAAa,EAAML,QAAQ,eAC1D,6DACA,iHACA,oHACA,iCAAgB,0BAAYC,WAAW,KAAvB,QAAhB,wGACA,YAAC,EAAD,CAAY0D,YAAY,EAAMtD,aAAa,EAAOL,QAAQ,eAC1D,0DACA,2BAAU,sBAAQC,WAAW,KAAnB,6BAAV,kCAA0G,0BAAYA,WAAW,KAAvB,SAA1G,KAAiK,0BAAYA,WAAW,KAAvB,QAAjK,KAAuN,0BAAYA,WAAW,KAAvB,YAAvN,uEAAmV,sBAAQA,WAAW,KAAnB,YAAnV,cACA,YAAC,EAAD,CAAY0D,YAAY,EAAMtD,aAAa,EAAML,QAAQ,gBAK7DH,EAAWM,gBAAiB,EC7CrB,IAAM0D,EAAuC,SAAC9D,GACnD,MAAwBK,EAAoBL,EAAMM,aAAlD,mBAAOqD,EAAP,KAAelD,EAAf,KAEA,OACE,kBAAC,EAAD,CAAeW,MAAM,SACnB,wCACCpB,EAAM4D,WACL,kBAAC,EAAD,CAA6BnD,MAAOA,IAEpC,kBAAC,EAAD,CAAqBA,MAAOA,IAE9B,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oBAKOI,EAAwC,SAAC/D,GACpD,IAAMgE,EAA6B,CACjCxB,IAAK,EACLF,IAAK,SAEP,EAAuB9B,mBAAuBwD,GAA9C,mBAAOvD,EAAP,KAAcC,EAAd,KASMiD,EAAS3D,EAAMM,YANN,kBACbI,GAAM,SAACuD,GAAD,MAAgB,CACpBzB,IAAKyB,EAAUzB,IACfF,IAAI,GAAD,OAAK0B,EAAa1B,IAAlB,YAAyB4B,KAAKC,MAAsB,IAAhBD,KAAKE,gBALjC,kBACb1D,GAAM,SAACuD,GAAD,MAAgB,CAAEzB,IAAKyB,EAAUzB,IAAM,EAAGF,IAAK2B,EAAU3B,SAQ3D+B,EAAOrE,EAAMM,YAAN,8DAC8CG,EAAM+B,IADpD,kBACiE/B,EAAM6B,IADvE,oEAE8C7B,EAAM+B,IAFpD,kBAEiE/B,EAAM6B,IAFvE,MAIb,OACE,kBAAC,EAAD,CAAelB,MAAM,SACnB,wCACCpB,EAAM4D,WACL,oCACE,kBAAC,EAAD,CAA+CvB,IAAK5B,IACpD,kBAAC,EAAD,CAA+C4B,IAAK5B,KAGtD,oCACE,kBAAC,EAAD,CAAuC4B,IAAK5B,IAC5C,kBAAC,EAAD,CAAuC4B,IAAK5B,KAGhD,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAMF,MAAvB,kBAdF,OAeE,8BAAOU,K,iBCrDPxE,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,yCACA,qBAAG,sBAAQC,WAAW,KAAnB,mBAAH,kCAAyF,iBAAGA,WAAW,IACnG,KAAQ,0DACP,0BAAYA,WAAW,KAAvB,oBAFL,kMAGA,yDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2WAcL,YAAC,EAAD,CAA0B0D,YAAY,EAAO3D,QAAQ,6BACrD,8CAA6B,0BAAYC,WAAW,MAAvB,2BAA7B,qBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+qBAqBL,YAAC,EAAD,CAA0B0D,YAAY,EAAMtD,aAAa,EAAOL,QAAQ,6BACxE,qFACA,YAAC,EAAD,CAA0B2D,YAAY,EAAMtD,aAAa,EAAML,QAAQ,6BACvE,wDACA,uDACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,8fAgBL,uBACA,0DACA,uTAGA,iTAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iIAWL,gFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,ieAeL,sDAAqC,0BAAYA,WAAW,KAAvB,WAArC,uBAAgH,0BAAYA,WAAW,KAAvB,WAAhH,sGAEM,0BAAYA,WAAW,KAAvB,iBAFN,gCAGA,YAAC,EAAD,CAA2B0D,YAAY,EAAO3D,QAAQ,8BACtD,qDACA,4GACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,2jBAqBL,8CAA6B,0BAAYA,WAAW,MAAvB,2BAA7B,qBACA,sDAAqC,0BAAYA,WAAW,KAAvB,WAArC,uBAAgH,0BAAYA,WAAW,KAAvB,WAAhH,oBACF,sBAAQA,WAAW,KAAnB,YADE,eAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,khBAkBL,YAAC,EAAD,CAA2B0D,YAAY,EAAMtD,aAAa,EAAOL,QAAQ,8BACzE,0DAAyC,0BAAYC,WAAW,KAAvB,WAAzC,uCACA,YAAC,EAAD,CAA2B0D,YAAY,EAAMtD,aAAa,EAAML,QAAQ,+BAK5EH,EAAWM,gBAAiB,EClKrB,IAAMkE,GAAsC,SAACtE,GAClD,MAAwBK,EAAoBL,EAAMM,aAAlD,mBAAOqD,EAAP,KAAelD,EAAf,KAEA,OACE,kBAAC,EAAD,CAAeW,MAAM,SACnB,wCACCpB,EAAM4D,WACL,kBAAC,EAAD,CAA4BnD,MAAOA,IAEnC,kBAAC,EAAD,CAAoBA,MAAOA,IAE7B,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oBAKOY,GAAuC,SAACvE,GACnD,IAAMgE,EAA6B,CACjCxB,IAAK,EACLF,IAAK,SAEP,EAAuB9B,mBAAuBwD,GAA9C,mBAAOvD,EAAP,KAAcC,EAAd,KASMiD,EAAS3D,EAAMM,YANN,kBACbI,GAAM,SAACuD,GAAD,MAAgB,CACpBzB,IAAKyB,EAAUzB,IACfF,IAAI,GAAD,OAAK0B,EAAa1B,IAAlB,YAAyB4B,KAAKC,MAAsB,IAAhBD,KAAKE,gBALjC,kBACb1D,GAAM,SAACuD,GAAD,MAAgB,CAAEzB,IAAKyB,EAAUzB,IAAM,EAAGF,IAAK2B,EAAU3B,SAQ3D+B,EAAOrE,EAAMM,YAAN,8DAC8CG,EAAM+B,IADpD,kBACiE/B,EAAM6B,IADvE,oEAE8C7B,EAAM+B,IAFpD,kBAEiE/B,EAAM6B,IAFvE,MAIb,OACE,kBAAC,EAAD,CAAelB,MAAM,SACnB,wCACCpB,EAAM4D,WACL,oCACE,kBAAC,EAAD,CAA8CvB,IAAK5B,IACnD,kBAAC,EAAD,CAA8C4B,IAAK5B,KAGrD,oCACE,kBAAC,EAAD,CAAsC4B,IAAK5B,IAC3C,kBAAC,EAAD,CAAsC4B,IAAK5B,KAG/C,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAMF,MAAvB,kBAdF,OAeE,8BAAOU,K,kBCrDPxE,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,wCACA,qBAAG,sBAAQC,WAAW,KAAnB,kBAAH,UAAgE,iBAAGA,WAAW,IAC1E,KAAQ,8DACP,0BAAYA,WAAW,KAAvB,wBAFL,sBAE+F,0BAAYA,WAAW,KAAvB,mBAF/F,yCAEoM,0BAAYA,WAAW,KAAvB,mBAFpM,2BAEsR,0BAAYA,WAAW,KAAvB,2BAFtR,SAEmW,0BAAYA,WAAW,KAAvB,uBAFnW,yBAE4b,sBAAQA,WAAW,KAAnB,qCAF5b,KAGA,uDAAiC,0BAAYA,WAAW,KAAvB,YAAjC,iFAAuK,0BAAYA,WAAW,KAAvB,uBAAvK,2CACA,sDACA,qBAAG,0BAAYA,WAAW,KAAvB,QAAH,yBAA6E,0BAAYA,WAAW,KAAvB,2BAA7E,WAA4J,sBAAQA,WAAW,KAAnB,qCAA5J,mEAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,kgBAgBL,YAAC,GAAD,CAAyB0D,YAAY,EAAO3D,QAAQ,4BACpD,qFACA,YAAC,GAAD,CAAyB2D,YAAY,EAAMtD,aAAa,EAAML,QAAQ,4BACtE,uBACA,uDACA,uTAGA,iTAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,iIAWL,gFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,meAeL,sDAAqC,0BAAYA,WAAW,KAAvB,WAArC,uBAAgH,0BAAYA,WAAW,KAAvB,WAAhH,4DACsC,0BAAYA,WAAW,KAAvB,iBADtC,WAC2G,sBAAQA,WAAW,KAAnB,WAD3G,gBAEA,YAAC,GAAD,CAA0B0D,YAAY,EAAO3D,QAAQ,6BACrD,8BACE,iBAAGC,WAAW,cAAd,yBAAqD,0BAAYA,WAAW,KAAvB,iBAArD,2KAGF,mDACA,4GACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,kTAmBTJ,GAAWM,gBAAiB,ECnGrB,IAAMoE,GAA0C,SAACxE,GACtD,MAAwBK,EAAoBL,EAAMM,aAAlD,mBAAOqD,EAAP,KAAelD,EAAf,KAEA,OACE,kBAAC,EAAD,CAAeW,MAAM,SACnB,wCACCpB,EAAM4D,WACL,kBAACT,EAAD,CAAgC1C,MAAOA,IAEvC,kBAAC,EAAD,CAAwBA,MAAOA,IAEjC,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oBAKOc,GAA2C,SAACzE,GACvD,IAAMgE,EAA6B,CACjCxB,IAAK,EACLF,IAAK,SAEP,EAAuB9B,mBAAuBwD,GAA9C,mBAAOvD,EAAP,KAAcC,EAAd,KASMiD,EAAS3D,EAAMM,YANN,kBACbI,GAAM,SAACuD,GAAD,MAAgB,CACpBzB,IAAKyB,EAAUzB,IACfF,IAAI,GAAD,OAAK0B,EAAa1B,IAAlB,YAAyB4B,KAAKC,MAAsB,IAAhBD,KAAKE,gBALjC,kBACb1D,GAAM,SAACuD,GAAD,MAAgB,CAAEzB,IAAKyB,EAAUzB,IAAM,EAAGF,IAAK2B,EAAU3B,SAQ3D+B,EAAOrE,EAAMM,YAAN,8DAC8CG,EAAM+B,IADpD,kBACiE/B,EAAM6B,IADvE,oEAE8C7B,EAAM+B,IAFpD,kBAEiE/B,EAAM6B,IAFvE,MAIb,OACE,kBAAC,EAAD,CAAelB,MAAM,SACnB,wCACCpB,EAAM4D,WACL,oCACE,kBAACH,EAAD,CAAkDpB,IAAK5B,IACvD,kBAAC8C,EAAD,CAAkDlB,IAAK5B,KAGzD,oCACE,kBAAC,EAAD,CAA0C4B,IAAK5B,IAC/C,kBAAC,EAAD,CAA0C4B,IAAK5B,KAGnD,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAMF,MAAvB,kBAdF,OAeE,8BAAOU,K,kBCrDPxE,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,4CACA,qBAAG,sBAAQC,WAAW,KAAnB,sBAAH,UAAoE,iBAAGA,WAAW,IAC9E,KAAQ,oFACP,0BAAYA,WAAW,KAAvB,4BAFL,2FAGA,qBAAG,sBAAQA,WAAW,KAAnB,uBAAH,wDAAmH,iBAAGA,WAAW,IAC7H,KAAQ,6CADuG,eAAnH,6DAGA,yDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gXAcL,YAAC,GAAD,CAA6B0D,YAAY,EAAO3D,QAAQ,gCACxD,uEACA,qBAAG,iBAAGC,WAAW,IACb,KAAQ,qDACP,0BAAYA,WAAW,KAAvB,eAFL,sDAEiH,0BAAYA,WAAW,KAAvB,uBAFjH,oDAGA,8HAA6G,0BAAYA,WAAW,KAAvB,cAA7G,gKACA,qBAAG,0BAAYA,WAAW,KAAvB,cAAH,sEAAgI,0BAAYA,WAAW,KAAvB,cAAhI,UAAiM,0BAAYA,WAAW,KAAvB,YAAjM,OAA6P,0BAAYA,WAAW,KAAvB,cAA7P,qFACA,0NACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gZAYL,YAAC,GAAD,CAA6B0D,YAAY,EAAMtD,aAAa,EAAOL,QAAQ,gCAC3E,qFACA,YAAC,GAAD,CAA6B2D,YAAY,EAAMtD,aAAa,EAAML,QAAQ,gCAC1E,uBACA,0DACA,uTAGA,iTAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,iIAWL,gFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,meAeL,sDAAqC,0BAAYA,WAAW,KAAvB,WAArC,uBAAgH,0BAAYA,WAAW,KAAvB,WAAhH,sCAEA,qDACA,sJAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,obAeL,6DACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,ijBAiBL,YAAC,GAAD,CAA8B0D,YAAY,EAAMtD,aAAa,EAAOL,QAAQ,iCAC5E,0DAAyC,0BAAYC,WAAW,KAAvB,WAAzC,uCACA,YAAC,GAAD,CAA8B0D,YAAY,EAAMtD,aAAa,EAAML,QAAQ,kCAK/EH,GAAWM,gBAAiB,EC5IrB,IAAMsE,GAAb,wKACE,WACE,IAAQpC,EAAQN,KAAKhC,MAAbsC,IACR,OACE,gBAAC,EAAD,CAAelB,MAAM,QACnB,yBACE,gCADF,OACiBkB,MANzB,gCAWE,WACE,IAAQE,EAAQR,KAAKhC,MAAbwC,IACR,OACE,gBAAC,EAAD,CAAepB,MAAM,OACnB,yBACE,gCADF,OACiBoB,MAhBzB,oBAsBE,WACE,OACE,gBAAC,EAAD,CAAepB,MAAM,UACnB,2BACGY,KAAK2C,qBACL3C,KAAK4C,2BA3BhB,GAAwDrE,iBAqClDsE,GAAetE,QAAW,gBAAG+B,EAAH,EAAGA,IAAH,OAC9B,gBAAC,EAAD,CAAelB,MAAM,QACnB,yBACE,gCADF,OACiBkB,OAQfwC,G,4JACJ,WACE,OACE,gBAAC,EAAD,CAAe1D,MAAM,OACnB,yBACE,gCADF,OACiBY,KAAKhC,MAAMwC,U,GALTjC,iBAgBdwE,GAAb,4JACE,WACE,OACE,gBAAC,EAAD,CAAe3D,MAAM,UACnB,2BACE,gBAACyD,GAAD,CAAcvC,IAAKN,KAAKhC,MAAMsC,MAC9B,gBAAC,GAAD,CAAcE,IAAKR,KAAKhC,MAAMwC,YANxC,GAAoCjC,iBAavByE,GAAU,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,UACxB,EAAsB1E,WAAe,GAArC,mBAAOiC,EAAP,KAAY0C,EAAZ,KACA,EAAsB3E,WAAe,KAArC,mBAAO+B,EAAP,KAAY6C,EAAZ,KAEA,OACE,2BACGF,EACC,gBAAC,GAAD,CAAgBzC,IAAKA,EAAKF,IAAKA,IAE/B,gBAAC,GAAD,CAAoCE,IAAKA,EAAKF,IAAKA,IAErD,0BAAQuB,QAAS,kBAAMsB,GAAO,SAACC,GAAD,gBAAaC,SAASD,GAAQ,QAA5D,gBAGA,0BAAQvB,QAAS,kBAAMqB,GAAO,SAACE,GAAD,OAAUA,EAAO,OAA/C,kB,kBCzFAvF,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,0CACA,8BACE,iBAAGC,WAAW,cAAd,aAAyC,0BAAYA,WAAW,KAAvB,oBAAzC,uIAIF,mFAAkE,sBAAQA,WAAW,KAAnB,6BAAlE,kEAEA,sBACE,kBAAIA,WAAW,MAAf,uDACA,kBAAIA,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,oEACA,kBAAIA,WAAW,MAAf,6CAAkE,iBAAGA,WAAW,KAC5E,KAAQ,oEADsD,oEAAlE,MAIF,8BACE,iBAAGA,WAAW,cAAa,iBAAGA,WAAW,IACrC,KAAQ,8CADe,mBAA3B,IAEiC,iBAAGA,WAAW,IAC3C,KAAQ,yEADqB,4BAFjC,8BAKqB,0BAAYA,WAAW,KAAvB,kBALrB,iPAO2D,iBAAGA,WAAW,IACrE,KAAQ,0DAD+C,eAP3D,cAWF,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,u1BAwCL,YAAC,GAAD,CAASD,QAAQ,YACjB,8BACE,iBAAGC,WAAW,cAAd,SAAqC,0BAAYA,WAAW,KAAvB,qBAArC,yEAA4K,0BAAYA,WAAW,KAAvB,uBAA5K,cAEF,wDACA,oNAEkC,0BAAYA,WAAW,KAAvB,uBAFlC,KAEuG,0BAAYA,WAAW,KAAvB,2BAFvG,OAEkL,0BAAYA,WAAW,KAAvB,iBAClL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,64BA6CL,YAAC,GAAD,CAAS+E,WAAS,EAAChF,QAAQ,aAK/BH,GAAWM,gBAAiB,E,sBCzItBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,+BACA,sBACE,kBAAIC,WAAW,MACb,YAAC,IAAD,CAAMC,GAAG,uBAAuBF,QAAQ,QAAxC,iBADF,+BAGA,kBAAIC,WAAW,MACb,YAAC,IAAD,CAAMC,GAAG,kBAAkBF,QAAQ,QAAnC,YADF,qCAGA,kBAAIC,WAAW,MACb,YAAC,IAAD,CAAMC,GAAG,qBAAqBF,QAAQ,QAAtC,eADF,wCAIA,kBAAIC,WAAW,MACb,YAAC,IAAD,CAAMC,GAAG,mBAAmBF,QAAQ,QAApC,aADF,wCAQNH,GAAWM,gBAAiB,EClC5B,IAAMkF,GAAgB/E,IAAM6C,MAIzB,SAACpD,GACF,OACE,kBAAC,EAAD,CAAeoB,MAAOpB,EAAMoB,OAA5B,4BAC2B,8CAD3B,QAC0D,IACvDpB,EAAMuF,SAAW,WAAa,eAFjC,iBAsBWC,GAfU,WACvB,IAAMC,EAAmBlF,IAAMmF,aAAY,cAAU,IAC/C/B,EAAShD,IAEf,OACE,oCACE,kBAAC2E,GAAD,CAAelE,MAAM,QAAQuE,OAAQF,EAAkBF,UAAQ,IAC/D,kBAACD,GAAD,CAAelE,MAAM,MAAMuE,OAAQ,aAAUJ,UAAU,IAEvD,wBAAIvE,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oBCvBAiC,GAAkD,WACtD,OAAO,kBAAC,EAAD,CAAexE,MAAM,OAArB,sBAGHkE,GAAgB/E,IAAM6C,MAA2B,WACrD,OACE,kBAAC,EAAD,CAAehC,MAAM,SAArB,4BAC2B,kDAoBhByE,GAfY,WACzB,IAAMJ,EAAmBlF,IAAMmF,aAAY,cAAU,IAC/C/B,EAAShD,IAEf,OACE,oCACE,kBAAC,GAAD,CAAiBgF,OAAQF,IACzB,kBAAC,GAAD,CAAeE,OAAQF,IAEvB,wBAAIzE,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oB,kBCjBA9D,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,qCACA,6BAAY,0BAAYC,WAAW,MAAvB,iBAAZ,qEACA,8BACE,iBAAGA,WAAW,cAAd,kEAA8F,0BAAYA,WAAW,KAAvB,iBAA9F,+DACgD,kBAAIA,WAAW,KAAf,OADhD,gJAIF,gCAAe,iBAAGA,WAAW,IACzB,KAAQ,6DADG,YAGf,qBAAG,0BAAYA,WAAW,KAAvB,iBAAH,mOAAgS,0BAAYA,WAAW,KAAvB,yBAAhS,KAAuW,0BAAYA,WAAW,KAAvB,gBAAvW,MACA,0HAAyG,0BAAYA,WAAW,KAAvB,eAAzG,6CAEA,YAAC,GAAD,CAAoBD,QAAQ,uBAC5B,qHACA,YAAC,GAAD,CAAmBA,QAAQ,sBAC3B,0DACA,kDAAiC,sBAAQC,WAAW,KAAnB,+CAAjC,8CACG,0BAAYA,WAAW,KAAvB,iBADH,8EAEA,8BACE,iBAAGA,WAAW,cAAd,+NAIF,gCAAe,iBAAGA,WAAW,IACzB,KAAQ,6DADG,aAOnBJ,GAAWM,gBAAiB,E,iCCnDf0F,GAAQ,SAACC,GACpB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OCKhDI,GAA4B,SAACnG,GACjC,MAAsBQ,mBAAS,gBAA/B,mBAAK4F,EAAL,KAAWC,EAAX,KAWA,OATAC,qBAAU,WACR,IAAMC,EAAO,yCAAG,uBAAAC,EAAA,sEACRV,GAAM,KADE,OAGdO,EAAQrG,EAAMyG,aAHA,2CAAH,qDAKbF,MACC,CAACvG,EAAMyG,cAGR,kBAAC,EAAD,CAAerF,MAAM,OACnB,6BAAMgF,KAKNM,GAAuC,SAAC1G,GAC5C,MAAsBQ,mBAAS,gBAA/B,mBAAK4F,EAAL,KAAWC,EAAX,KAqBA,OAnBAC,qBAAU,WACR,IAAIK,GAAS,EACPJ,EAAO,yCAAG,uBAAAC,EAAA,sEACRV,GAAM,KADE,WAGVa,EAHU,iDAOdN,EAAQrG,EAAMyG,aAPA,2CAAH,qDAYb,OAFAF,IAEO,WACLI,GAAS,KAEV,CAAC3G,EAAMyG,cAGR,kBAAC,EAAD,CAAerF,MAAM,SACnB,6BAAMgF,KAKCQ,GAA4B,WACvC,MAA4BpG,mBAAS,GAArC,mBAAKK,EAAL,KAAcgG,EAAd,KACA,EAAwBrG,mBAAS,gBAAjC,mBAAO4F,EAAP,KAAaC,EAAb,KAEA,OACE,kBAAC,EAAD,CAAejF,MAAM,SACnB,kBAAC,GAAD,CAAgBqF,YAAaL,IAE7B,4BACEvC,QAAS,WACPgD,EAAWhG,KACXwF,EAAQ,gBAAD,OAAiBxF,MAH5B,yBAYOiG,GAAuC,WAClD,MAA4BtG,mBAAS,GAArC,mBAAKK,EAAL,KAAcgG,EAAd,KACA,EAAwBrG,mBAAS,gBAAjC,mBAAO4F,EAAP,KAAaC,EAAb,KAEA,OACE,kBAAC,EAAD,CAAejF,MAAM,SACnB,kBAAC,GAAD,CAA2BqF,YAAaL,IAExC,4BACEvC,QAAS,WACPgD,EAAWhG,KACXwF,EAAQ,gBAAD,OAAiBxF,MAH5B,yB,kBCtEAhB,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,yCACA,iCAAgB,iBAAGC,WAAW,IAC1B,KAAQ,2DACP,0BAAYA,WAAW,KAAvB,gBAFL,sCAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,mhBAwBL,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAA3B,2MAGF,YAAC,GAAD,CAAuBD,QAAQ,0BAC/B,sCAAqB,sBAAQC,WAAW,KAAnB,UAArB,gEACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,8pBAiCL,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAA3B,qKAGF,YAAC,GAAD,CAAkCD,QAAQ,qCAC1C,2GACA,mEAAkD,iBAAGC,WAAW,IAC5D,KAAQ,mHADsC,WAAlD,MAOJJ,GAAWM,gBAAiB,E,sBC7FtBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,uCACA,gEACA,6NAEK,0BAAYC,WAAW,KAAvB,YAFL,iEAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,qwBAkCTJ,GAAWM,gBAAiB,ECpD5B,IAAM2G,GAAUxG,IAAMyG,cAA4B,CAAEC,IAAK,EAAGC,IAAK,IAE3DC,GAAmD,SAACnH,GACxD,IAAQiH,EAAajH,EAAbiH,IAAKC,EAAQlH,EAARkH,IAEb,OACE,kBAAC,EAAD,CAAe9F,MAAM,QACnB,kBAAC2F,GAAQI,SAAT,CAAkB1G,MAAO,CAAEwG,MAAKC,QAC9B,6BACE,2CAAiBE,KAAKC,UAAU,CAAEJ,MAAKC,OAAO,KAAM,KAEtD,6BAAMlH,EAAM8B,aAMdwF,GAAwB/G,IAAM6C,MAAK,kBACvC,kBAAC2D,GAAQQ,SAAT,MACG,SAAC9G,GAAD,OACC,kBAAC,EAAD,CAAeW,MAAM,SACnB,0DAC2B,qCAD3B,KAC8C,IAC3CgG,KAAKC,UAAU5G,EAAO,KAAM,WAOjC+G,GAAwBjH,IAAM6C,MAAK,kBACvC,kBAAC2D,GAAQQ,SAAT,MACG,SAAC9G,GAAD,OACC,kBAAC,EAAD,CAAeW,MAAM,OACnB,0DAC2B,qCAD3B,KAC8C,IAC3CgG,KAAKC,UAAU5G,EAAO,KAAM,WAsBxBgH,GAfF,WACX,MAA0BlH,IAAMC,SAAS,GAAzC,mBAAOkH,EAAP,KAAcC,EAAd,KAEA,OACE,oCACE,kBAAC,GAAD,CAAUV,IAAKS,EAAOR,IAAK,GACzB,kBAACI,GAAD,MACA,kBAACE,GAAD,OAEF,wBAAIxG,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAM8D,EAASD,EAAQ,KAAxC,oBCpDAX,GAAUxG,IAAMyG,cAA4B,CAAEvG,MAAO,IAErD0G,GAAqB,SAACnH,GAC1B,IAAMS,EAAQF,IAAMqH,SAAQ,iBAAO,CAAEnH,MAAO,KAAM,IAClD,OACE,kBAAC,EAAD,CAAeW,MAAM,QACnB,kBAAC,GAAQ+F,SAAT,CAAkB1G,MAAOA,GACvB,6BACE,2CAAiB2G,KAAKC,UAAU5G,EAAO,KAAM,KAE/C,6BAAMT,EAAM8B,aAMdyF,GAAqBhH,IAAM6C,MAAK,WACpC,IAAM3C,EAAQF,IAAMsH,WAAWd,IAE/B,OACE,kBAAC,EAAD,CAAe3F,MAAM,SACnB,2CAAiBgG,KAAKC,UAAU5G,EAAO,KAAM,QAoBpCqH,GAfS,WACtB,IAAMnE,EAAShD,IAEf,OACE,oCACE,kBAAC,GAAD,KACE,kBAAC4G,GAAD,OAGF,wBAAIvG,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oBCrCAoE,GAAaxH,IAAMyG,cAA4B,GAC/CgB,GAAazH,IAAMyG,cAA4B,GAE/CG,GAAmD,SAACnH,GACxD,IAAQiH,EAAajH,EAAbiH,IAAKC,EAAQlH,EAARkH,IAEb,OACE,kBAAC,EAAD,CAAe9F,MAAM,QACnB,kBAAC2G,GAAWZ,SAAZ,CAAqB1G,MAAOwG,GAC1B,kBAACe,GAAWb,SAAZ,CAAqB1G,MAAOyG,GAC1B,6BACE,2CAAiBE,KAAKC,UAAU,CAAEJ,MAAKC,OAAO,KAAM,KAEtD,6BAAMlH,EAAM8B,cAOhBwF,GAAwB/G,IAAM6C,MAAK,WACvC,IAAM3C,EAAQF,IAAMsH,WAAWE,IAE/B,OACE,kBAAC,EAAD,CAAe3G,MAAM,SACnB,8CAAoBgG,KAAKC,UAAU5G,EAAO,KAAM,QAKhD+G,GAAwBjH,IAAM6C,MAAK,WACvC,IAAM3C,EAAQF,IAAMsH,WAAWG,IAE/B,OACE,kBAAC,EAAD,CAAe5G,MAAM,OACnB,8CAAoBgG,KAAKC,UAAU5G,EAAO,KAAM,QAoBvCwH,GAfS,WACtB,MAA0B1H,IAAMC,SAAS,GAAzC,mBAAOkH,EAAP,KAAcC,EAAd,KAEA,OACE,oCACE,kBAAC,GAAD,CAAUV,IAAKS,EAAOR,IAAK,GACzB,kBAAC,GAAD,MACA,kBAAC,GAAD,OAEF,wBAAIlG,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAM8D,EAASD,EAAQ,KAAxC,oB,oBC7CAX,GAAUC,aAA4B,CAAEC,IAAK,EAAGC,IAAK,IAErDC,GAAmD,SAACnH,GACxD,IAAQiH,EAAajH,EAAbiH,IAAKC,EAAQlH,EAARkH,IAEb,OACE,kBAAC,EAAD,CAAe9F,MAAM,QACnB,kBAAC,GAAQ+F,SAAT,CAAkB1G,MAAO,CAAEwG,MAAKC,QAC9B,6BACE,2CAAiBE,KAAKC,UAAU,CAAEJ,MAAKC,OAAO,KAAM,KAEtD,6BAAMlH,EAAM8B,aAMdwF,GAAwB/G,IAAM6C,MAAK,WACvC,IAAM3C,EAAQyH,aAAmBnB,IAAS,SAACoB,GAAD,OAAOA,EAAElB,OAEnD,OACE,kBAAC,EAAD,CAAe7F,MAAM,SACnB,0DAC2B,qCAD3B,KAC8C,IAC3CgG,KAAKC,UAAU5G,EAAO,KAAM,QAM/B+G,GAAwBjH,IAAM6C,MAAK,WACvC,IAAM3C,EAAQyH,aAAmBnB,IAAS,SAACoB,GAAD,OAAOA,EAAEjB,OAEnD,OACE,kBAAC,EAAD,CAAe9F,MAAM,OACnB,0DAC2B,qCAD3B,KAC8C,IAC3CgG,KAAKC,UAAU5G,EAAO,KAAM,QAqBtB2H,GAfS,WACtB,MAA0B7H,IAAMC,SAAS,GAAzC,mBAAOkH,EAAP,KAAcC,EAAd,KAEA,OACE,oCACE,kBAAC,GAAD,CAAUV,IAAKS,EAAOR,IAAK,GACzB,kBAAC,GAAD,MACA,kBAAC,GAAD,OAEF,wBAAIlG,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAAS,kBAAM8D,EAASD,EAAQ,KAAxC,oBCzDAX,GAAUxG,IAAMyG,cAA4B,CAAEvG,MAAO,IAErD0G,GAAqB,SAACnH,GAC1B,IAAMS,EAAQ,CAAEA,MAAO,GACvB,OACE,kBAAC,EAAD,CAAeW,MAAM,QACnB,kBAAC,GAAQ+F,SAAT,CAAkB1G,MAAOA,GACvB,6BACE,2CAAiB2G,KAAKC,UAAU5G,EAAO,KAAM,KAE/C,6BAAMT,EAAM8B,aAMdyF,GAAqBhH,IAAM6C,MAAK,WACpC,IAAM3C,EAAQF,IAAMsH,WAAWd,IAE/B,OACE,kBAAC,EAAD,CAAe3F,MAAM,SACnB,2CAAiBgG,KAAKC,UAAU5G,EAAO,KAAM,QAmBpC4H,GAdW,WACxB,IAAM1E,EAAShD,IAEf,OACE,oCACE,kBAAC,GAAD,KACE,kBAAC,GAAD,OAEF,wBAAIK,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,oB,kBC5BA9D,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iCACA,6EAA4D,iBAAGC,WAAW,IACtE,KAAQ,yCACP,0BAAYA,WAAW,KAAvB,oBAFL,KAGA,0CACA,gEAA+C,0BAAYA,WAAW,KAAvB,YAA/C,gCAAoI,0BAAYA,WAAW,KAAvB,YAApI,WAA+L,0BAAYA,WAAW,KAAvB,SAA/L,uCAAwR,0BAAYA,WAAW,KAAvB,YAAxR,2CAAwX,0BAAYA,WAAW,KAAvB,gBAAxX,4BAA6c,0BAAYA,WAAW,KAAvB,gBAA7c,gCAAsiB,0BAAYA,WAAW,KAAvB,2BAAtiB,cAAwnB,0BAAYA,WAAW,KAAvB,gBAAxnB,iFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iNAUL,8BACE,iBAAGA,WAAW,cAAd,gDAA4E,iBAAGA,WAAW,IACtF,KAAQ,iDADgE,WAA5E,oBAIF,gWAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2SAaL,yFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,6MAYL,YAAC,GAAD,CAAmBD,QAAQ,sBAC3B,8BACE,iBAAGC,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAA3B,2FAA+J,0BAAYA,WAAW,KAAvB,aAA/J,MAEF,gEACA,mGAAkF,0BAAYA,WAAW,KAAvB,aAAlF,UACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gRAUL,YAAC,GAAD,CAAiBD,QAAQ,oBACzB,yDAAwC,0BAAYC,WAAW,KAAvB,cAAxC,4BACA,2DACA,uCAAsB,iBAAGA,WAAW,IAChC,KAAQ,oEADU,aAAtB,kIAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,oVAgBL,YAAC,GAAD,CAAiBD,QAAQ,oBACzB,2DACA,qBAAG,iBAAGC,WAAW,IACb,KAAQ,kEADT,oCAAH,eAE6D,iBAAGA,WAAW,IACvE,KAAQ,4CADiD,yBAF7D,2BAI8D,0BAAYA,WAAW,KAAvB,wBAJ9D,uDAKA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2YAkBL,YAAC,GAAD,CAAiBD,QAAQ,oBACzB,2DACA,gEAA+C,0BAAYC,WAAW,KAAvB,wBAA/C,MAAsH,0BAAYA,WAAW,KAAvB,wBAAtH,KACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,mMAKL,uKAAsJ,iBAAGA,WAAW,IAChK,KAAQ,wGAD0I,gBAAtJ,yBAGA,qBAAG,0BAAYA,WAAW,KAAvB,qBAAH,UAA2E,iBAAGA,WAAW,IACrF,KAAQ,8IAD+D,oBAA3E,OAEqC,0BAAYA,WAAW,KAAvB,oBAFrC,iFAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iIAKL,qBAAG,0BAAYA,WAAW,KAAvB,eAAH,4BAAuF,0BAAYA,WAAW,KAAvB,gBAAvF,oCACA,8BACE,iBAAGA,WAAW,cAAd,2HAEF,4CAA2B,0BAAYA,WAAW,KAAvB,eAA3B,qBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sqBA0BL,YAACoI,GAAD,CAAoBrI,QAAQ,uBAC5B,4HACkB,iBAAGC,WAAW,IAC5B,KAAQ,mFADM,mBADlB,MAQJJ,GAAWM,gBAAiB,E,sBC5LtBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,6GACA,8BAAa,kBAAIC,WAAW,KAAf,SAAb,QAAuD,kBAAIA,WAAW,KAAf,SAAvD,+UAIA,8TAIA,sEACA,8BAAa,kBAAIA,WAAW,KAAf,SAAb,uDAAsG,kBAAIA,WAAW,KAAf,aAAtG,uKAEoC,kBAAIA,WAAW,KAAf,YAFpC,2FAGwB,kBAAIA,WAAW,KAAf,WAHxB,kKAKA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iiBAsBL,qCAAoB,kBAAIA,WAAW,KAAf,OAApB,4DAAgH,kBAAIA,WAAW,KAAf,QAAhH,wCACiB,kBAAIA,WAAW,KAAf,WADjB,kHAGA,gFAA+D,kBAAIA,WAAW,KAAf,WAA/D,yLAEoB,kBAAIA,WAAW,KAAf,OAFpB,sDAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,yfAqBL,8RAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2eAoBL,uaAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,43BAsCL,gDACA,oMAC2D,kBAAIA,WAAW,KAAf,SAD3D,uCACoI,kBAAIA,WAAW,KAAf,WADpI,sFAE+E,kBAAIA,WAAW,KAAf,SAF/E,iEAG0B,kBAAIA,WAAW,KAAf,WAH1B,iLAKA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gnBA4BL,oEAAmD,kBAAIA,WAAW,KAAf,aAAnD,uEACuB,kBAAIA,WAAW,KAAf,kBADvB,gBACkF,kBAAIA,WAAW,KAAf,WADlF,KAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,wkBA0BL,gRAGA,mCACA,sBACE,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,qDADQ,wDAQ1BJ,GAAWM,gBAAiB,E,sBCrNtBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,sCACA,uCACA,sBACE,kBAAIC,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,iDADQ,YAApB,0CAGA,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,yEADQ,gCAApB,mFAGA,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,wFADQ,oDAApB,gFAGA,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,8BADQ,kBAApB,4EAIF,+BACA,sBACE,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,mHACP,0BAAYA,WAAW,KAAvB,gBAFL,sBAIF,qCACA,sBACE,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,0DADQ,qCAQ1BJ,GAAWM,gBAAiB,E,sBCzCtBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wCACA,0FACA,8DACA,iUAGiC,0BAAYC,WAAW,KAAvB,YAHjC,mCAIA,0FAAyE,iBAAGA,WAAW,IACnF,KAAQ,6FAD6D,iBAAzE,8BAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,g7BA0CTJ,GAAWM,gBAAiB,E,sBC9DtBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wEACA,oLACoD,0BAAYC,WAAW,KAAvB,sBADpD,QAC2H,0BAAYA,WAAW,KAAvB,eAD3H,KAEA,sCAAqB,0BAAYA,WAAW,KAAvB,eAArB,wMAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,qNASL,+DACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,qPAOL,8IACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2GAML,2OAC0F,sBAAQA,WAAW,KAAnB,WAD1F,QAC8I,sBAAQA,WAAW,KAAnB,aAD9I,KAEA,mCACA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,iCAAkG,0BAAYA,WAAW,KAAvB,sBAAlG,eAAgL,kBAAIA,WAAW,KAAf,iBAAhL,2DACmD,0BAAYA,WAAW,KAAvB,UADnD,kCACwI,0BAAYA,WAAW,KAAvB,iBADxI,gBAES,sBAAQA,WAAW,KAAnB,aAFT,+CAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,0HAUL,kIACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2GAML,wEAAuD,sBAAQA,WAAW,KAAnB,QAAvD,wVAGyE,0BAAYA,WAAW,KAAvB,YAHzE,gCAIO,0BAAYA,WAAW,KAAvB,uBAJP,kCAIyG,0BAAYA,WAAW,KAAvB,cAJzG,uDAKA,yEACA,kFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sFAML,qIACF,kBAAIA,WAAW,KAAf,yCADE,uDAEA,qGACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,yDAIL,6EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sDAIL,+EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,0OAYL,0EAAyD,0BAAYA,WAAW,KAAvB,eAAzD,iBAAkI,sBAAQA,WAAW,KAAnB,YAAlI,qBACF,kBAAIA,WAAW,KAAf,mDADE,6DAEA,8GAA6F,0BAAYA,WAAW,KAAvB,UAA7F,iJAEwB,0BAAYA,WAAW,KAAvB,aAFxB,4EAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+QAcL,+EAA8D,sBAAQA,WAAW,KAAnB,UAA9D,mDACF,sBAAQA,WAAW,KAAnB,SADE,uSAGgF,sBAAQA,WAAW,KAAnB,UAHhF,iGAKA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gHAML,wCAAuB,kBAAIA,WAAW,KAAf,8CAAvB,KACA,iEACA,gHAA+F,0BAAYA,WAAW,KAAvB,UAA/F,+CAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sEAIL,mGAAkF,0BAAYA,WAAW,KAAvB,YAAlF,kCACA,0BAAYA,WAAW,KAAvB,wBADA,OACwE,0BAAYA,WAAW,KAAvB,2BADxE,0BAEA,+CAA8B,sBAAQA,WAAW,KAAnB,aAA9B,gEACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gDAIL,2IAKJJ,GAAWM,gBAAiB,E,sBCtJtBP,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,qCACA,sBACE,kBAAIC,WAAW,MACb,YAAC,IAAD,CAAMC,GAAG,cAAcF,QAAQ,QAA/B,gBADF,kCAQNH,GAAWM,gBAAiB,ECxBrB,IAAMmI,GAAgC,SAACvI,GAC5C,MAAwBK,EAAoBL,EAAMM,aAAlD,mBAAOqD,EAAP,KAAelD,EAAf,KACM+H,EAAMX,KAUZ,OACE,kBAAC,EAAD,CAAezG,MAAM,SACnB,yCAAeX,GACdT,EAAM4D,WACL,kBAAC6E,GAAD,CAA2ChI,MAAOA,IAElD,kBAAC,GAAD,CAAmCA,MAAOA,IAE5C,wBAAIO,MAAO,CAAEW,WAAY,iBACzB,4BAAQkC,QAASF,GAAjB,kBACA,4BAAQE,QAlByB,WACnC2E,EAAIE,0BAA4B,IAiB9B,mCAGA,4BAAQ7E,QAjB4B,WACtC2E,EAAIG,6BAA+B,IAgBjC,yCAWA5B,GAAUxG,IAAMyG,cAA4B,CAChD0B,yBAA0B,EAC1BC,4BAA6B,IAEzBd,GAAa,kBAAMtH,IAAMsH,WAAWd,KAEpC6B,GAAgD,SAAC5I,GACrD,MACE6H,KADMa,EAAR,EAAQA,yBAA0BC,EAAlC,EAAkCA,4BAGlC,OACE,kBAAC,EAAD,CAAevH,MAAM,QACnB,wDAA8BpB,EAAMS,OACpC,6DAAmCiI,GACnC,kCACM,uCADN,8BACsD,IACnDC,KAMHF,GAAwDlI,IAAM6C,MAElE,SAACpD,GACD,MACE6H,KADMa,EAAR,EAAQA,yBAA0BC,EAAlC,EAAkCA,4BAGlC,OACE,kBAAC,EAAD,CAAevH,MAAM,QACnB,uDAC2B,4CAD3B,KACuDpB,EAAMS,OAE7D,6DAAmCiI,GACnC,kCACM,uCADN,8BACsD,IACnDC,O,kBCpEH9I,GAAc,GAIL,SAASC,GAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,kBACD,OAAO,YALS,UAKT,iBAAeH,GAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,0DACA,uDACA,YAAC,GAAD,CAAmB2D,YAAY,EAAM3D,QAAQ,sBAC7C,sCACA,YAAC,GAAD,CAAmB2D,YAAY,EAAO3D,QAAQ,sBAC9C,uBACA,2EACA,uDACA,YAAC,GAAD,CAAmB2D,YAAY,EAAM3D,QAAQ,sBAC7C,sCACA,YAAC,GAAD,CAAmB2D,YAAY,EAAO3D,QAAQ,uBAKlDH,GAAWM,gBAAiB,ECb5B,IA4HeyI,GA5HO,WACpB,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,WACb,gCACE,+CAEF,yBAAKA,UAAU,QACb,+BACE,4BACE,4BACE,kBAAC,IAAD,CAAM3I,GAAG,KAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,cACA,4BACE,4BACE,kBAAC,IAAD,CAAMA,GAAG,oBAAT,oBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,mBAAT,mBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,uBAAT,uBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,qBAAT,uBAIN,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,4BACE,4BACE,kBAAC,IAAD,CAAMA,GAAG,wBAAT,kBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,mBAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,sBAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,oBAAT,gBAIN,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,eACA,4BACE,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,mBAIN,4BACE,kBAAC,IAAD,CAAMA,GAAG,uBAAT,8BAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAIN,8BACE,kBAAC,IAAM4I,SAAP,CAAgBC,SAAU,4CACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cAAcC,QAAS,kBAAC,EAAD,QACnC,kBAAC,IAAD,CAAOD,KAAK,mBAAmBC,QAAS,kBAAC,EAAD,QACxC,kBAAC,IAAD,CAAOD,KAAK,kBAAkBC,QAAS,kBAAC,GAAD,QACvC,kBAAC,IAAD,CACED,KAAK,sBACLC,QAAS,kBAAC,GAAD,QAEX,kBAAC,IAAD,CAAOD,KAAK,oBAAoBC,QAAS,kBAAC,GAAD,QACzC,kBAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,kBAAC,GAAD,QAC9B,kBAAC,IAAD,CACED,KAAK,uBACLC,QAAS,kBAAC,GAAD,QAEX,kBAAC,IAAD,CAAOD,KAAK,kBAAkBC,QAAS,kBAAC,GAAD,QACvC,kBAAC,IAAD,CACED,KAAK,qBACLC,QAAS,kBAAC,GAAD,QAEX,kBAAC,IAAD,CAAOD,KAAK,mBAAmBC,QAAS,kBAAC,GAAD,QAExC,kBAAC,IAAD,CAAOD,KAAK,eAAeC,QAAS,kBAAC,GAAD,QACpC,kBAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,kBAAC,GAAD,QAEnC,kBAAC,IAAD,CACED,KAAK,sBACLC,QAAS,kBAAC,GAAD,QAEX,kBAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,kBAAC,GAAD,QAChC,kBAAC,IAAD,CAAOD,KAAK,gBAAgBC,QAAS,kBAAC,GAAD,QACrC,kBAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,kBAAC,GAAD,QAC9B,kBAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,kBAAC,EAAD,YAKjC,gCACE,yBAAKJ,UAAU,WACb,uBAAGK,KAAK,gDACN,yBAAKC,IAAI,uBAAuBC,IAAI,kBAGxC,yBAAKP,UAAU,aACb,uBAAGK,KAAK,gDAAR,uB,SCjIGG,I,OAJF,CACXA,KCQgC,SAACtJ,GACjC,MAAsDA,EAA9C8I,iBAAR,MAAoB,eAApB,IAAsD9I,EAAlB8B,gBAApC,MAA+C,GAA/C,EACMyH,EAAqBT,EAAUU,QAAQ,YAAa,IACpDF,EAAOxH,EAAS0H,QAAQ,MAAO,IAErC,OACE,oCAEE,sFACA,qFAEA,kBAAC,KAAD,iBACMC,KADN,CAEEH,KAAMA,EACNC,SAAUA,EACVG,WAAOC,KAEN,gBAAGb,EAAH,EAAGA,UAAW9H,EAAd,EAAcA,MAAO4I,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,aAAcC,EAA3C,EAA2CA,cAA3C,OACC,yBAAKhB,UAAWA,EAAW9H,MAAK,2BAAOA,GAAP,IAAca,QAAS,KACpD+H,EAAOG,KAAI,SAACC,EAAMC,GAAP,OACV,wBAASJ,EAAa,CAAEG,OAAME,IAAKD,IAChCD,EAAKD,KAAI,SAACI,EAAOD,GAAR,OACR,yBAAUJ,EAAc,CAAEK,QAAOD,wBCrB/BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCLa,IAAIC,IAAWC,KACvBC,eAEXC,IAASC,OACP,kBAAC,IAAD,CAAa9K,WAAYA,IACvB,kBAAC,GAAD,OAEF+K,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.ecd583a7.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Overview`}</h2>\n    <p>{`The project is created to experiment with different approaches to use\nReact and create a list of do's, dont's, problematic approaches and best\npractice in terms of performance, readability, extensibility and\nmaintainability.`}</p>\n    <h3>{`Note about `}<inlineCode parentName=\"h3\">{`React.memo`}</inlineCode></h3>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` is useful for cases where you have a component that should be `}<strong parentName=\"p\">{`re-rendered rarely`}</strong>{`,\nbut is expensive to render. There is still some cost of using `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` and it might be problematic,\nif abused in a large app.`}</p>\n    <h3>{`Components`}</h3>\n    <p>{`Examples of misusing the `}<Link to=\"/components\" mdxType=\"Link\">{`components`}</Link>{` paradigm and how to avoid unwanted re-rendering\nand make application more robust and maintainable.`}</p>\n    <h3>{`Hooks`}</h3>\n    <p>{`A set of techniques to leverage the power of `}<Link to=\"/hooks\" mdxType=\"Link\">{`hooks`}</Link>{` without introducing performance issues.`}</p>\n    <h3>{`Context`}</h3>\n    <Link to=\"/context\" mdxType=\"Link\">Context</Link> is powerful concept, but if you don't follow the\nbest practices how to use it, it leads to a massive ammount of the entire components\nTree re-rendering. This section describes how to avoid such situations.\n    <h3>{`Immutability`}</h3>\n    <p>{`It explains an `}<Link to=\"/immutability\" mdxType=\"Link\">{`immutability`}</Link>{` concept and why it is important, when using React.`}</p>\n    <h3>{`Links`}</h3>\n    <p>{`The `}<Link to=\"/links\" mdxType=\"Link\">{`links`}</Link>{` to the tools, articles about performance and best practices can be found under this section.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\nexport const useForceValueUpdate = (\n  changeProps?: boolean\n): [() => void, number] => {\n  const initialValue = 1;\n  const [value, setIt] = React.useState<number>(initialValue);\n\n  return [() => setIt(value + 1), changeProps ? value : initialValue];\n};\n\nexport const useForceUpdate = () => {\n  const [, setIt] = React.useState<any>();\n\n  return () => setIt({});\n};\n","import React from 'react';\n\ntype RenderCounterProps = {\n  children: React.ReactNode;\n  color: string;\n  style?: React.CSSProperties;\n};\n\nconst RenderCounter: React.FC<RenderCounterProps> = (props) => {\n  const counter = React.useRef<number>(0);\n  counter.current += 1;\n\n  return (\n    <div\n      style={{\n        ...props.style,\n        borderStyle: 'solid',\n        borderWidth: 3,\n        borderColor: props.color,\n        position: 'relative',\n        width: '70%',\n        marginTop: 4,\n        marginBottom: 4,\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          background: 'black',\n          color: 'white',\n          fontFamily: 'monospace',\n          padding: 2,\n        }}\n      >\n        Render count: {counter.current}\n      </div>\n      {props.children}\n    </div>\n  );\n};\n\nexport default RenderCounter;\n","import React, { Component, FunctionComponent, PureComponent } from 'react';\nimport RenderCounter from '../../components/RenderCounter';\nimport { TValue, TObjectProps } from './common';\n\nexport class ChildClassComponent extends Component<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentMemoized extends Component<TValue> {\n  shouldComponentUpdate(nextProps: Readonly<TValue>) {\n    return nextProps.value !== this.props.value;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsStr extends Component<TObjectProps> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsNum extends Component<TObjectProps> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsMemoizedStr extends Component<TObjectProps> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsMemoizedNum extends Component<TObjectProps> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.num !== this.props.obj.num;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponent extends PureComponent<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentMemoized extends PureComponent<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsStr extends PureComponent<TObjectProps> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsNum extends PureComponent<TObjectProps> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsMemoizedStr extends PureComponent<TObjectProps> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsMemoizedNum extends PureComponent<TObjectProps> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.num !== this.props.obj.num;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport const ChildFunctionComponent: FunctionComponent<TValue> = (\n  props: TValue\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.value}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentMemoized: FunctionComponent<TValue> =\n  React.memo<FunctionComponent<TValue>>((props: TValue) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.value}\n      </RenderCounter>\n    );\n  });\n\nexport const ChildFunctionComponentWithObjectPropsStr: FunctionComponent<\n  TObjectProps\n> = (props: TObjectProps) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.obj.str}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentWithObjectPropsNum: FunctionComponent<\n  TObjectProps\n> = (props: TObjectProps) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.obj.num}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentWithObjectPropsMemoizedStr: FunctionComponent<TObjectProps> =\n  React.memo<FunctionComponent<TObjectProps>>(\n    (props: TObjectProps) => {\n      return (\n        <RenderCounter color=\"blue\">\n          Child Function Component <strong>Memoized</strong>: {props.obj.str}\n        </RenderCounter>\n      );\n    },\n    (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n      return prevProps.obj.str === nextProps.obj.str;\n    }\n  );\n\nexport const ChildFunctionComponentWithObjectPropsMemoizedNum: FunctionComponent<TObjectProps> =\n  React.memo<FunctionComponent<TObjectProps>>(\n    (props: TObjectProps) => {\n      return (\n        <RenderCounter color=\"blue\">\n          Child Function Component <strong>Memoized</strong>: {props.obj.num}\n        </RenderCounter>\n      );\n    },\n    (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n      return prevProps.obj.num === nextProps.obj.num;\n    }\n  );\n","import React from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildPureComponent,\n  ChildFunctionComponent,\n  ChildClassComponentMemoized,\n  ChildFunctionComponentMemoized,\n  ChildPureComponentMemoized,\n} from './ChildComponents';\nimport { TProps } from './common';\n\nconst Components = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildClassComponentMemoized value={value} />\n          <ChildPureComponentMemoized value={value} />\n          <ChildFunctionComponentMemoized value={value} />\n        </>\n      ) : (\n        <>\n          <ChildClassComponent value={value} />\n          <ChildPureComponent value={value} />\n          <ChildFunctionComponent value={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport default Components;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\nimport Components from '../examples/components/Components.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Components`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html\"\n      }}><inlineCode parentName=\"a\">{`React.Component`}</inlineCode></a>{` encapsulates `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n      }}>{`State and Lifecycle`}</a>{`.`}</p>\n    <p>{`There are few types o the components available in React:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Class Component`}</strong>{` - the component which extends `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/react-api.html#reactcomponent\"\n        }}><inlineCode parentName=\"a\">{`React.Component`}</inlineCode></a>{` and uses OOP paradigms to handle state, properties, actions and manage component lifecycle. React component re-renders if the parent component got re-rendered even if no props were changed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Pure Component`}</strong>{` - the `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/react-api.html#reactpurecomponent\"\n        }}><inlineCode parentName=\"a\">{`React.PureComponent`}</inlineCode></a>{` is similar to the `}<inlineCode parentName=\"li\">{`React.Component`}</inlineCode>{`. The difference between them is that `}<inlineCode parentName=\"li\">{`React.Component`}</inlineCode>{` doesn’t implement `}<inlineCode parentName=\"li\">{`shouldComponentUpdate()`}</inlineCode>{`, but `}<inlineCode parentName=\"li\">{`React.PureComponent`}</inlineCode>{` implements it with a `}<strong parentName=\"li\">{`shallow prop and state comparison`}</strong>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Function Component`}</strong>{` - the `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n        }}><inlineCode parentName=\"a\">{`React.FunctionComponent`}</inlineCode></a>{` is the component which takes props and renders them based on internal component logic.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Method Component`}</strong>{` - the `}<Link to=\"/method-component\" mdxType=\"Link\">{`Method Component`}</Link>{` is the component which is defined as a method of class or as a function.`}</li>\n    </ul>\n    <h3>{`Regular components no props change`}</h3>\n    <p>{`If there is no any additional work on the child components done the `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{` children components will re-render even if `}<strong parentName=\"p\">{`no properties have been changed`}</strong>{`.`}</p>\n    <p>{`As `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{` component implements shallow comparison of the props out of the box, it won't re-render.`}</p>\n    <Components isMemoized={false} changeProps={false} mdxType=\"Components\" />\n    <h3>{`Regular components props change`}</h3>\n    <p>{`If `}<strong parentName=\"p\">{`any prop has been changed`}</strong>{` on any of the component type: `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{` all of them will re-render and this is `}<strong parentName=\"p\">{`expected`}</strong>{` behavior.`}</p>\n    <Components isMemoized={false} changeProps={true} mdxType=\"Components\" />\n    <h3>{`Memoized components no props change`}</h3>\n    <p>{`Components should be \"memoized\" to prevent re-rendering when no props have been changed.`}</p>\n    <p>{`The \"memoziation\" techniques described in the corresponding section of each component type.`}</p>\n    <p>{`The only `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{` component has this functionality out of the box and no additional work for such component required.`}</p>\n    <Components isMemoized={true} changeProps={false} mdxType=\"Components\" />\n    <h3>{`Memoized components props change`}</h3>\n    <p>{`If `}<strong parentName=\"p\">{`any prop has been changed`}</strong>{` on any of the component type: `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{` all of them will re-render even if they are \"memoized\" and this is `}<strong parentName=\"p\">{`expected`}</strong>{` behavior.`}</p>\n    <Components isMemoized={true} changeProps={true} mdxType=\"Components\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC, useState } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildClassComponentMemoized,\n  ChildClassComponentWithObjectPropsMemoizedStr,\n  ChildClassComponentWithObjectPropsMemoizedNum,\n  ChildClassComponentWithObjectPropsStr,\n  ChildClassComponentWithObjectPropsNum,\n} from './ChildComponents';\nimport { TProps, TObjectValue } from './common';\n\nexport const PlainPropsClassComponent: FC<TProps> = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <ChildClassComponentMemoized value={value} />\n      ) : (\n        <ChildClassComponent value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport const ObjectPropsClassComponent: FC<TProps> = (props: TProps) => {\n  const initialValue: TObjectValue = {\n    num: 1,\n    str: 'hello',\n  };\n  const [value, setIt] = useState<TObjectValue>(initialValue);\n  const setNum = () =>\n    setIt((prevState) => ({ num: prevState.num + 1, str: prevState.str }));\n  const setStr = () =>\n    setIt((prevState) => ({\n      num: prevState.num,\n      str: `${initialValue.str} ${Math.round(Math.random() * 100)}`,\n    }));\n\n  const update = props.changeProps ? setStr : setNum;\n  const note = props.changeProps\n    ? `str property changes, num remains unchanged: { num: ${value.num}, str: ${value.str} }`\n    : `num property changes, str remains unchanged: { num: ${value.num}, str: ${value.str} }`;\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildClassComponentWithObjectPropsMemoizedNum obj={value} />\n          <ChildClassComponentWithObjectPropsMemoizedStr obj={value} />\n        </>\n      ) : (\n        <>\n          <ChildClassComponentWithObjectPropsNum obj={value} />\n          <ChildClassComponentWithObjectPropsStr obj={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>&nbsp;\n      <span>{note}</span>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport {\n  PlainPropsClassComponent,\n  ObjectPropsClassComponent,\n} from '../examples/components/ClassComponent.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Class Component`}</h2>\n    <p><strong parentName=\"p\">{`Class Component`}</strong>{` - the component which extends `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactcomponent\"\n      }}><inlineCode parentName=\"a\">{`React.Component`}</inlineCode></a>{` and uses OOP paradigms to handle state, properties, actions and manage component lifecycle. React component re-renders if the parent component got re-rendered even if no props were changed.`}</p>\n    <h3>{`Regular Component - Plain props`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponent extends Component<TValue> {\n  render() {\n    // if parent component updates this component will be re-rendered 💣,\n    // no matter if the props have been changed or not.\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <PlainPropsClassComponent isMemoized={false} mdxType=\"PlainPropsClassComponent\" />\n    <h3>{`Solution 1: Override `}<inlineCode parentName=\"h3\">{`shouldComponentUpdate()`}</inlineCode>{` lifecycle method`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentMemoized extends Component<TValue> {\n  // ✅ place the logic to detect if component should update or not.\n  shouldComponentUpdate(nextProps: Readonly<TValue>) {\n    // 💡 the logic here might become very complicated,\n    // make sure you split components to the small or\n    // consider using Pure or Function components.\n    return nextProps.value !== this.props.value;\n  }\n\n  // ✅ the component re-renders only if props have been changed.\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <PlainPropsClassComponent isMemoized={true} changeProps={false} mdxType=\"PlainPropsClassComponent\" />\n    <p>{`and it re-renders as expected, when props have been changes.`}</p>\n    <PlainPropsClassComponent isMemoized={true} changeProps={true} mdxType=\"PlainPropsClassComponent\" />\n    <h3>{`Solution 2: Use Pure Component`}</h3>\n    <p>{`Consider using Pure Component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponent extends PureComponent<TValue> {\n  // \\`Pure\\` component implements \\`shouldComponentUpdate()\\` with a shallow prop and state comparison.\n  // That means no additional changes needed for the plain props.\n  // ✅ Component does not re-render if parent component re-renders\n  // but the props have not been changed.\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Regular Component - Object props`}</h3>\n    <p>{`Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed.`}</p>\n    <p>{`Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n`}</code></pre>\n    <p>{`The component takes object properties as defined above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentWithObjectProps extends Component<TObjectProps> {\n  render() {\n    // The component only works with ✅ obj.str property and ignores ✅ obj.num\n    // If parent component doesn't change the ✅ obj.str, but changes ⛔ obj.num\n    // this component will still re-render 💣\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\nstill re-renders. This will only be true if the actual instance changed,\nbecause `}<inlineCode parentName=\"p\">{`PureComponent`}</inlineCode>{` checks the instance itself.`}</p>\n    <ObjectPropsClassComponent isMemoized={false} mdxType=\"ObjectPropsClassComponent\" />\n    <h3>{`Solution 1: Use plain props`}</h3>\n    <p>{`The best solution is to use plain props and pass primitive values to the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentWithObjectProps extends Component<{\n  str: string;\n}> {\n  // ❗ even is you use plain props, make sule you also override shouldComponentUpdate()\n  // othervise force update will trigger re-rendering.\n  shouldComponentUpdate(nextProps: Readonly<{ str: string }>) {\n    return nextProps.str !== this.props.str;\n  }\n\n  render() {\n    // ✅ No object which can impact re-rendering\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <h3>{`Solution 2: Override `}<inlineCode parentName=\"h3\">{`shouldComponentUpdate()`}</inlineCode>{` lifecycle method`}</h3>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\n`}<strong parentName=\"p\">{`does not`}</strong>{` re-render.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentWithObjectPropsMemoized extends Component<TObjectProps> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    // ✅ Make sure you cover scenario, when other developer\n    // could potentially add other fields to the props object\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <ObjectPropsClassComponent isMemoized={true} changeProps={false} mdxType=\"ObjectPropsClassComponent\" />\n    <p>{`but when parent component changes `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{` re-rendering happens, as expected:`}</p>\n    <ObjectPropsClassComponent isMemoized={true} changeProps={true} mdxType=\"ObjectPropsClassComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC, useState } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildPureComponent,\n  ChildPureComponentMemoized,\n  ChildPureComponentWithObjectPropsMemoizedStr,\n  ChildPureComponentWithObjectPropsMemoizedNum,\n  ChildPureComponentWithObjectPropsStr,\n  ChildPureComponentWithObjectPropsNum,\n} from './ChildComponents';\nimport { TProps, TObjectValue } from './common';\n\nexport const PlainPropsPureComponent: FC<TProps> = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <ChildPureComponentMemoized value={value} />\n      ) : (\n        <ChildPureComponent value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport const ObjectPropsPureComponent: FC<TProps> = (props: TProps) => {\n  const initialValue: TObjectValue = {\n    num: 1,\n    str: 'hello',\n  };\n  const [value, setIt] = useState<TObjectValue>(initialValue);\n  const setNum = () =>\n    setIt((prevState) => ({ num: prevState.num + 1, str: prevState.str }));\n  const setStr = () =>\n    setIt((prevState) => ({\n      num: prevState.num,\n      str: `${initialValue.str} ${Math.round(Math.random() * 100)}`,\n    }));\n\n  const update = props.changeProps ? setStr : setNum;\n  const note = props.changeProps\n    ? `str property changes, num remains unchanged: { num: ${value.num}, str: ${value.str} }`\n    : `num property changes, str remains unchanged: { num: ${value.num}, str: ${value.str} }`;\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildPureComponentWithObjectPropsMemoizedNum obj={value} />\n          <ChildPureComponentWithObjectPropsMemoizedStr obj={value} />\n        </>\n      ) : (\n        <>\n          <ChildPureComponentWithObjectPropsNum obj={value} />\n          <ChildPureComponentWithObjectPropsStr obj={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>&nbsp;\n      <span>{note}</span>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport {\n  PlainPropsPureComponent,\n  ObjectPropsPureComponent,\n} from '../examples/components/PureComponent.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Pure Component`}</h2>\n    <p><strong parentName=\"p\">{`Pure Component`}</strong>{` - the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactpurecomponent\"\n      }}><inlineCode parentName=\"a\">{`React.PureComponent`}</inlineCode></a>{` is similar to the `}<inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{`. The difference between them is that `}<inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{` doesn’t implement `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{`, but `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{` implements it with a `}<strong parentName=\"p\">{`shallow prop and state comparison`}</strong>{`.`}</p>\n    <p>{`If your React component’s `}<inlineCode parentName=\"p\">{`render()`}</inlineCode>{` function renders the same result given the same props and state, you can use `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{` for a performance boost in some cases.`}</p>\n    <h3>{`Pure Component - Plain props`}</h3>\n    <p><inlineCode parentName=\"p\">{`Pure`}</inlineCode>{` component implements `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` with a `}<strong parentName=\"p\">{`shallow prop and state comparison`}</strong>{`.\nThat means no additional changes needed for the plain props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponent extends PureComponent<TValue> {\n  // \\`Pure\\` component implements \\`shouldComponentUpdate()\\` with a **shallow prop and state comparison**.\n  // That means no additional changes needed for the plain props.\n  // ✅ Component does not re-render if parent component re-renders\n  // but the props have not been changed.\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <PlainPropsPureComponent isMemoized={false} mdxType=\"PlainPropsPureComponent\" />\n    <p>{`and it re-renders as expected, when props have been changes.`}</p>\n    <PlainPropsPureComponent isMemoized={true} changeProps={true} mdxType=\"PlainPropsPureComponent\" />\n    <hr></hr>\n    <h3>{`Pure Component - Object props`}</h3>\n    <p>{`Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed.`}</p>\n    <p>{`Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n`}</code></pre>\n    <p>{`The component takes object properties as defined above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponentWithObjectProps extends PureComponent<TObjectProps> {\n  render() {\n    // The component only works with ✅ obj.str property and ignores ✅ obj.num\n    // If parent component doesn't change the ✅ obj.str, but changes ⛔ obj.num\n    // this component will still re-render 💣\n    return (\n      <RenderCounter color=\"red\">\n        Child Pure Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\nstill re-renders. This happens, because `}<inlineCode parentName=\"p\">{`PureComponent`}</inlineCode>{` does a `}<strong parentName=\"p\">{`shallow`}</strong>{` comparison.`}</p>\n    <ObjectPropsPureComponent isMemoized={false} mdxType=\"ObjectPropsPureComponent\" />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: the drawback of `}<inlineCode parentName=\"p\">{`PureComponent`}</inlineCode>{` with object props is, that if you change a value inside the object\nand not change the instance, the component may not re-render because it fails the shallow checks.`}</p>\n    </blockquote>\n    <h3>{`Solution: Use plain props`}</h3>\n    <p>{`The best solution is to use plain props and pass primitive values to the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponentWithObjectProps extends PureComponent<{\n  str: string;\n}> {\n  render() {\n    // ✅ No object which can impact re-rendering\n    return (\n      <RenderCounter color=\"red\">\n        Child Pure Component: {this.props.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC, useState } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildFunctionComponent,\n  ChildFunctionComponentMemoized,\n  ChildFunctionComponentWithObjectPropsStr,\n  ChildFunctionComponentWithObjectPropsNum,\n  ChildFunctionComponentWithObjectPropsMemoizedStr,\n  ChildFunctionComponentWithObjectPropsMemoizedNum,\n} from './ChildComponents';\nimport { TProps, TObjectValue } from './common';\n\nexport const PlainPropsFunctionComponent: FC<TProps> = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <ChildFunctionComponentMemoized value={value} />\n      ) : (\n        <ChildFunctionComponent value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport const ObjectPropsFunctionComponent: FC<TProps> = (props: TProps) => {\n  const initialValue: TObjectValue = {\n    num: 1,\n    str: 'hello',\n  };\n  const [value, setIt] = useState<TObjectValue>(initialValue);\n  const setNum = () =>\n    setIt((prevState) => ({ num: prevState.num + 1, str: prevState.str }));\n  const setStr = () =>\n    setIt((prevState) => ({\n      num: prevState.num,\n      str: `${initialValue.str} ${Math.round(Math.random() * 100)}`,\n    }));\n\n  const update = props.changeProps ? setStr : setNum;\n  const note = props.changeProps\n    ? `str property changes, num remains unchanged: { num: ${value.num}, str: ${value.str} }`\n    : `num property changes, str remains unchanged: { num: ${value.num}, str: ${value.str} }`;\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildFunctionComponentWithObjectPropsMemoizedNum obj={value} />\n          <ChildFunctionComponentWithObjectPropsMemoizedStr obj={value} />\n        </>\n      ) : (\n        <>\n          <ChildFunctionComponentWithObjectPropsNum obj={value} />\n          <ChildFunctionComponentWithObjectPropsStr obj={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>&nbsp;\n      <span>{note}</span>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport {\n  PlainPropsFunctionComponent,\n  ObjectPropsFunctionComponent,\n} from '../examples/components/FunctionComponent.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Function Component`}</h2>\n    <p><strong parentName=\"p\">{`Function Component`}</strong>{` - the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n      }}><inlineCode parentName=\"a\">{`React.FunctionComponent`}</inlineCode></a>{` is the component which takes props and renders them based on internal component logic.`}</p>\n    <p><strong parentName=\"p\">{`Function Components`}</strong>{` are functions and not classes. These components use `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n      }}>{`react hooks`}</a>{` to control re-rendering and to handle life cycle events.`}</p>\n    <h3>{`Regular Component - Plain props`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// Component is not memoized the parent re-render triggers this component to re-render 💣 too\n// even if no props have been changed.\nexport const ChildFunctionComponent: FunctionComponent<TValue> = (\n  props: TValue\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.value}\n    </RenderCounter>\n  );\n};\n`}</code></pre>\n    <PlainPropsFunctionComponent isMemoized={false} mdxType=\"PlainPropsFunctionComponent\" />\n    <h3>{`Solution: Memoize component with React.memo()`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactmemo\"\n      }}><inlineCode parentName=\"a\">{`React.memo`}</inlineCode></a>{` is a higher order component. It’s similar to `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{` but for function components instead of classes.`}</p>\n    <p>{`If your function component renders the same result given the same props, you can wrap it in a call to `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.`}</p>\n    <p><inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` only affects props changes. If your function component wrapped in `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` has a `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`useContext`}</inlineCode>{` Hook in its implementation, it will still rerender when state or context change.`}</p>\n    <p>{`By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// ✅ Memoize component to make sure it doesn't re-render, when props have been changed.\nexport const ChildFunctionComponentMemoized: FunctionComponent<TValue> =\n  React.memo<FunctionComponent<TValue>>((props: TValue) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.value}\n      </RenderCounter>\n    );\n  });\n`}</code></pre>\n    <PlainPropsFunctionComponent isMemoized={true} changeProps={false} mdxType=\"PlainPropsFunctionComponent\" />\n    <p>{`and it re-renders as expected, when props have been changes.`}</p>\n    <PlainPropsFunctionComponent isMemoized={true} changeProps={true} mdxType=\"PlainPropsFunctionComponent\" />\n    <hr></hr>\n    <h3>{`Regular Component - Object props`}</h3>\n    <p>{`Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed.`}</p>\n    <p>{`Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n`}</code></pre>\n    <p>{`The component takes object properties as defined above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const ChildFunctionComponentWithObjectProps: FunctionComponent<\n  TObjectProps\n> = (props: TObjectProps) => {\n  // The component only works with ✅ obj.str property and ignores ✅ obj.num\n  // If parent component doesn't change the ✅ obj.str, but changes ⛔ obj.num\n  // this component will still re-render 💣\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.obj.str}\n    </RenderCounter>\n  );\n};\n`}</code></pre>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\nstill re-renders.`}</p>\n    <h3>{`Solution 1: Use plain props`}</h3>\n    <p>{`The best solution is to use plain props and pass primitive values to the component.\nDon't forget to memoize the props value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// ✅ Memoize component to make sure it doesn't re-render, when props have been changed.\nexport const ChildFunctionComponentMemoized: FunctionComponent<{\n  str: strings;\n}> = React.memo<FunctionComponent<{ str: strings }>>(\n  (props: { str: strings }) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.str}\n      </RenderCounter>\n    );\n  }\n);\n`}</code></pre>\n    <h2>{`Solution 2: Add comparison function`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const ChildFunctionComponentWithObjectPropsMemoized: FunctionComponent<TObjectProps> =\n  React.memo<FunctionComponent<TObjectProps>>(\n    (props: TObjectProps) => {\n      return (\n        <RenderCounter color=\"blue\">\n          Child Function Component <strong>Memoized</strong>: {props.obj.str}\n        </RenderCounter>\n      );\n    },\n    // ✅ Add the properties comparison function.\n    (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n      return prevProps.obj.str === nextProps.obj.str;\n    }\n  );\n`}</code></pre>\n    <ObjectPropsFunctionComponent isMemoized={true} changeProps={false} mdxType=\"ObjectPropsFunctionComponent\" />\n    <p>{`but when parent component changes `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{` re-rendering happens, as expected:`}</p>\n    <ObjectPropsFunctionComponent isMemoized={true} changeProps={true} mdxType=\"ObjectPropsFunctionComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import * as React from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\ninterface IClassComponentWithMethodComponentsProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponentWithMethodComponents extends React.PureComponent<IClassComponentWithMethodComponentsProps> {\n  private strMethodComponent() {\n    const { str } = this.props;\n    return (\n      <RenderCounter color=\"blue\">\n        <p>\n          <i>str</i> is {str}\n        </p>\n      </RenderCounter>\n    );\n  }\n  private numMethodComponent() {\n    const { num } = this.props;\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {num}\n        </p>\n      </RenderCounter>\n    );\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          {this.strMethodComponent()}\n          {this.numMethodComponent()}\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IStrComponentProps {\n  str: string;\n}\nconst StrComponent = React.memo(({ str }: IStrComponentProps) => (\n  <RenderCounter color=\"blue\">\n    <p>\n      <i>str</i> is {str}\n    </p>\n  </RenderCounter>\n));\n\ninterface INumComponentProps {\n  num: number;\n}\nclass NumComponent extends React.PureComponent<INumComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {this.props.num}\n        </p>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IClassComponentProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponent extends React.PureComponent<IClassComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          <StrComponent str={this.props.str} />\n          <NumComponent num={this.props.num} />\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n\nexport const Wrapper = ({ isCorrect }: { isCorrect: boolean }) => {\n  const [num, setNum] = React.useState(1);\n  const [str, setStr] = React.useState('1');\n\n  return (\n    <div>\n      {isCorrect ? (\n        <ClassComponent num={num} str={str} />\n      ) : (\n        <ClassComponentWithMethodComponents num={num} str={str} />\n      )}\n      <button onClick={() => setStr((prev) => `${parseInt(prev) + 1}`)}>\n        Update `str`\n      </button>\n      <button onClick={() => setNum((prev) => prev + 1)}>Update `num`</button>\n    </div>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Wrapper } from '../examples/components/MethodComponent.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Method Component`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note, the `}<inlineCode parentName=\"p\">{`Method Component`}</inlineCode>{` term is not an industry defined term.\nThat's how we call it describe the component which get returned from\nthe method of class.`}</p>\n    </blockquote>\n    <p>{`Method Component is a component which was implemented as a `}<strong parentName=\"p\">{`method of Class Component`}</strong>{`.\nImplementing components this way will cause several issues:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Hard to maintain, components become tightly coupled`}</li>\n      <li parentName=\"ul\">{`Hard to control re-rendering conditions`}</li>\n      <li parentName=\"ul\">{`Hard to reuse such components`}</li>\n      <li parentName=\"ul\">{`Idiomatically React is functional and the approach is rather OOP`}</li>\n      <li parentName=\"ul\">{`Potentially may cause hooks related bugs (`}<a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/dont-call-a-react-function-component\"\n        }}>{`https://kentcdodds.com/blog/dont-call-a-react-function-component`}</a>{`)`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://reactjs.org/tutorial/tutorial.html\"\n        }}>{`React Tutorials`}</a>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://reactjs.org/tutorial/tutorial.html#passing-data-through-props\"\n        }}>{`illustrate this approach`}</a>{`\nin the examples with the `}<inlineCode parentName=\"p\">{`renderSquare()`}</inlineCode>{` method. We recommended to use it only if there is strong use case for such a usage.\nOtherwise try to avoid this approach, because of the reasons described in this article.\nReact Tutorials mentions that it should be factored out in the `}<a parentName=\"p\" {...{\n          \"href\": \"https://reactjs.org/tutorial/tutorial.html#wrapping-up\"\n        }}>{`Wrapping Up`}</a>{` section.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface IClassComponentWithMethodComponentsProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponentWithMethodComponents extends React.PureComponent<IClassComponentWithMethodComponentsProps> {\n  private strMethodComponent() {\n    const { str } = this.props;\n    return (\n      <RenderCounter color=\"blue\">\n        <p>\n          <i>str</i> is {str}\n        </p>\n      </RenderCounter>\n    );\n  }\n  private numMethodComponent() {\n    const { num } = this.props;\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {num}\n        </p>\n      </RenderCounter>\n    );\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          {this.strMethodComponent()}\n          {this.numMethodComponent()}\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <Wrapper mdxType=\"Wrapper\" />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: `}<inlineCode parentName=\"p\">{`Method Components`}</inlineCode>{` are not specific to classes only, this pattern has been seen also in `}<inlineCode parentName=\"p\">{`Function Components`}</inlineCode>{` as well.`}</p>\n    </blockquote>\n    <h3>{`Solution: Separated Components`}</h3>\n    <p>{`Every component has its scope and depends only on required props.\nIt allows us to easily refactor/remove a component and specify re-render conditions\nfor each component separately using `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`React.memo()`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface IStrComponentProps {\n  str: string;\n}\nconst StrComponent = React.memo(({ str }: IStrComponentProps) => (\n  <RenderCounter color=\"blue\">\n    <p>\n      <i>str</i> is {str}\n    </p>\n  </RenderCounter>\n));\n\ninterface INumComponentProps {\n  num: number;\n}\nclass NumComponent extends React.PureComponent<INumComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {this.props.num}\n        </p>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IClassComponentProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponent extends React.PureComponent<IClassComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          <StrComponent str={this.props.str} />\n          <NumComponent num={this.props.num} />\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <Wrapper isCorrect mdxType=\"Wrapper\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Hooks`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <Link to=\"/generic-hook-guides\" mdxType=\"Link\">Generic Guide</Link> - the generic hooks topics\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/hook-use-state\" mdxType=\"Link\">useState</Link> - the usage of `useState()` hook\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/hook-use-callback\" mdxType=\"Link\">useCallback</Link> - the usage of `useCallback()`\nhook\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/hook-use-effect\" mdxType=\"Link\">useEffect</Link> - the usage of `useEffect()` hook\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport { useForceUpdate } from '../../hooks/useForceUpdate';\n\nconst MemoComponent = React.memo<{\n  color: string;\n  onNoop: Function;\n  memoized: boolean;\n}>((props) => {\n  return (\n    <RenderCounter color={props.color}>\n      A component wrapped with <code>React.memo()</code> with{' '}\n      {props.memoized ? 'memoized' : 'not memoized'} callback.\n    </RenderCounter>\n  );\n});\n\nconst ProperUseColback = () => {\n  const memoizedCallback = React.useCallback(() => {}, []);\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <MemoComponent color=\"green\" onNoop={memoizedCallback} memoized />\n      <MemoComponent color=\"red\" onNoop={() => {}} memoized={false} />\n\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n\nexport default ProperUseColback;\n","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport { useForceUpdate } from '../../hooks/useForceUpdate';\n\nconst SampleComponent: React.FC<{ onNoop: Function }> = () => {\n  return <RenderCounter color=\"red\">A usual component</RenderCounter>;\n};\n\nconst MemoComponent = React.memo<{ onNoop: Function }>(() => {\n  return (\n    <RenderCounter color=\"green\">\n      A component wrapped with <code>React.memo()</code>\n    </RenderCounter>\n  );\n});\n\nconst UselessUseCallback = () => {\n  const memoizedCallback = React.useCallback(() => {}, []);\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <SampleComponent onNoop={memoizedCallback} />\n      <MemoComponent onNoop={memoizedCallback} />\n\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n\nexport default UselessUseCallback;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport ProperUseCallback from '../examples/hooks/properUseCallback';\nimport UselessUseCallback from '../examples/hooks/uselessUseCallback';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`useCallback`}</h2>\n    <h3>{`Use `}<inlineCode parentName=\"h3\">{`useCallback()`}</inlineCode>{` hook carefully, if you have a control on you children components`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`In React code reviews, I see a lot of unnecessary usage of the `}<inlineCode parentName=\"p\">{`useCallback()`}</inlineCode>{` hook.\nCommon misconception is that you need to use it for `}<em parentName=\"p\">{`any`}</em>{` callback passed as a prop to a child component.\nHowever, not true: it's a perf optimization only for when child component is pure/memo'd.`}</p>\n    </blockquote>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/spikebrehm/status/1233038597734965248\"\n      }}>{`Twitter`}</a></p>\n    <p><inlineCode parentName=\"p\">{`useCallback()`}</inlineCode>{` hooks allows to keep references to created functions inside components, but it should be used only for callbacks are passed to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. `}<inlineCode parentName=\"p\">{`shouldComponentUpdate`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`React.memo()`}</inlineCode>{`).`}</p>\n    <p>{`By default all React components do not use any update blockers, so there is no sense to force use `}<inlineCode parentName=\"p\">{`useCallback`}</inlineCode>{`\nfor every callback in your application:`}</p>\n    <UselessUseCallback mdxType=\"UselessUseCallback\" />\n    <p>{`But, it makes sense to pass memoized callbacks to components that handle reference equality:`}</p>\n    <ProperUseCallback mdxType=\"ProperUseCallback\" />\n    <h3>{`Children are out of your control`}</h3>\n    <p>{`On the other hand, if you `}<strong parentName=\"p\">{`don't know what children component might be`}</strong>{`, it is worth to wrap your functions\nwith `}<inlineCode parentName=\"p\">{`useCallback()`}</inlineCode>{` hook. The operation itself is cheap and can prevent unwanted perf issues.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`But if you don't \"own\" the child component, isn't it safer to memo it when you pass it on?\nIf your function is new on each render, you might break some perf of your consumers.\ne.g. shouldComponentUpdate / useEffect`}</p>\n    </blockquote>\n    <p>{`Source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/sag1v/status/1233127420879949826?s=20\"\n      }}>{`Twitter`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","export const sleep = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","import React, { useEffect, FC, useState } from 'react';\nimport { sleep } from '../../core/utils';\nimport RenderCounter from '../../components/RenderCounter';\n\ntype TData = { updatedData: string };\n\nconst UseEffectAsync: FC<TData> = (props: TData) => {\n  let [data, setData] = useState('initial data');\n\n  useEffect(() => {\n    const asyncOp = async () => {\n      await sleep(10 * 1000);\n\n      setData(props.updatedData);\n    };\n    asyncOp();\n  }, [props.updatedData]);\n\n  return (\n    <RenderCounter color=\"red\">\n      <div>{data}</div>\n    </RenderCounter>\n  );\n};\n\nconst UseEffectAsyncWithCleanup: FC<TData> = (props: TData) => {\n  let [data, setData] = useState('initial data');\n\n  useEffect(() => {\n    let cancel = false;\n    const asyncOp = async () => {\n      await sleep(10 * 1000);\n\n      if (cancel) {\n        return;\n      }\n\n      setData(props.updatedData);\n    };\n\n    asyncOp();\n\n    return () => {\n      cancel = true;\n    };\n  }, [props.updatedData]);\n\n  return (\n    <RenderCounter color=\"green\">\n      <div>{data}</div>\n    </RenderCounter>\n  );\n};\n\nexport const UseEffectAsyncExample: FC = () => {\n  let [counter, setCounter] = useState(1);\n  const [data, setData] = useState('updated data');\n\n  return (\n    <RenderCounter color=\"black\">\n      <UseEffectAsync updatedData={data} />\n\n      <button\n        onClick={() => {\n          setCounter(counter++);\n          setData(`updated data ${counter}`);\n        }}\n      >\n        Re-render component\n      </button>\n    </RenderCounter>\n  );\n};\n\nexport const UseEffectAsyncWithCleanupExample: FC = () => {\n  let [counter, setCounter] = useState(1);\n  const [data, setData] = useState('updated data');\n\n  return (\n    <RenderCounter color=\"black\">\n      <UseEffectAsyncWithCleanup updatedData={data} />\n\n      <button\n        onClick={() => {\n          setCounter(counter++);\n          setData(`updated data ${counter}`);\n        }}\n      >\n        Re-render component\n      </button>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport {\n  UseEffectAsyncExample,\n  UseEffectAsyncWithCleanupExample,\n} from '../examples/hooks/useEffect';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`useEffect async`}</h2>\n    <p>{`When use `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html#useeffect\"\n      }}><inlineCode parentName=\"a\">{`useEffect()`}</inlineCode></a>{` hook with async operation inside,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const UseEffectAsync: FC<TData> = (props: TData) => {\n  let [data, setData] = useState('initial data');\n\n  useEffect(() => {\n    const asyncOp = async () => {\n      await sleep(10 * 1000);\n\n      setData(props.updatedData);\n    };\n\n    asyncOp()\n      .then(...)      // ❗ Promises must be resolved properly\n      .catch(...);    // ❗ Don't forget to handle exceptions\n  }, [props.updatedData]);\n\n  return (\n    <RenderCounter color=\"red\">\n      <div>{data}</div>\n    </RenderCounter>\n  );\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` wait 10 seconds and look how data get updated. After that click few times on \"re-render\" button\nand look how data will start update sequentially and render each data change, when promise resolves.`}</p>\n    </blockquote>\n    <UseEffectAsyncExample mdxType=\"UseEffectAsyncExample\" />\n    <p>{`make sure you `}<strong parentName=\"p\">{`always`}</strong>{` return cleanup function, which will cancel/ignore function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const UseEffectAsyncWithCleanup: FC<TData> = (props: TData) => {\n  let [data, setData] = useState('initial data');\n\n  useEffect(() => {\n    let cancel = false;\n    const asyncOp = async () => {\n      await sleep(10 * 1000);\n\n      if (cancel) {\n        return;\n      }\n\n      setData(props.updatedData);\n    };\n\n    asyncOp()\n      .then(...)      // ❗ Promises must be resolved properly\n      .catch(...);    // ❗ Don't forget to handle exceptions\n\n    return () => {\n      cancel = true;\n    };\n  }, [props.updatedData]);\n\n  return (\n    <RenderCounter color=\"green\">\n      <div>{data}</div>\n    </RenderCounter>\n  );\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` wait 10 seconds and look how data get updated. After that click few times on \"re-render\" button\nand the data will update once when the last re-render happens.`}</p>\n    </blockquote>\n    <UseEffectAsyncWithCleanupExample mdxType=\"UseEffectAsyncWithCleanupExample\" />\n    <p>{`otherwise you might gat stale data, when the promise resolves later than expected.`}</p>\n    <p>{`more detailed information in the following `}<a parentName=\"p\" {...{\n        \"href\": \"https://dev.to/n1ru4l/homebrew-react-hooks-useasynceffect-or-how-to-handle-async-operations-with-useeffect-1fa8\"\n      }}>{`article`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`useState hook`}</h2>\n    <h3>{`Calculate state based on initial value`}</h3>\n    <p>{`Common source of bugs in React is when the code inside a callback computes a new value of state\nthat needs to use the previous state value. In that case, the code needs to use the variant\nof the `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` function that receives the current state value as parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const source = 'Some string';\nconst value = React.useRef<string | undefined>(source);\nconst [state, update] = React.useState({\n  stringProp: 'string prop value',\n  boolProp: false,\n  hasValue: !isEmptyValue(source),\n});\n\nconst onChange = React.useCallback(\n  (newValue: string) => {\n    value.current = newValue;\n    const newHasValue = !isEmptyValue(newValue);\n\n    // It is important ❗ to do the value comparison inside the update function\n    // to ensure that the callback being called by react is the updated\n    // once referencing the new state.\n    update((state) =>\n      newHasValue !== state.hasValue\n        ? {\n            ...state,\n            hasValue: newHasValue,\n          }\n        : state\n    );\n  },\n  [update]\n);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = { foo: number; bar: number };\n\nconst Context = React.createContext<ContextValue>({ foo: 0, bar: 0 });\n\nconst Provider: React.FC<{ foo: number; bar: number }> = (props) => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={{ foo, bar }}>\n        <div>\n          <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => (\n  <Context.Consumer>\n    {(value) => (\n      <RenderCounter color=\"green\">\n        <code>\n          ConsumerFoo (listens for <code>foo</code>):{' '}\n          {JSON.stringify(value, null, 2)}\n        </code>\n      </RenderCounter>\n    )}\n  </Context.Consumer>\n));\n\nconst ConsumerBar: React.FC = React.memo(() => (\n  <Context.Consumer>\n    {(value) => (\n      <RenderCounter color=\"red\">\n        <code>\n          ConsumerBar (listens for <code>bar</code>):{' '}\n          {JSON.stringify(value, null, 2)}\n        </code>\n      </RenderCounter>\n    )}\n  </Context.Consumer>\n));\n\nconst Comp = () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n\nexport default Comp;\n","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport { useForceUpdate } from '../../hooks/useForceUpdate';\n\ntype ContextValue = { value: number };\nconst Context = React.createContext<ContextValue>({ value: 1 });\n\nconst Provider: React.FC = (props) => {\n  const value = React.useMemo(() => ({ value: 1 }), []);\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={value}>\n        <div>\n          <code>Provider: {JSON.stringify(value, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst Consumer: React.FC = React.memo(() => {\n  const value = React.useContext(Context);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>Consumer: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ContextMemoized = () => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <Provider>\n        <Consumer />\n      </Provider>\n\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n\nexport default ContextMemoized;\n","import React from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = number;\n\nconst FooContext = React.createContext<ContextValue>(0);\nconst BarContext = React.createContext<ContextValue>(0);\n\nconst Provider: React.FC<{ foo: number; bar: number }> = (props) => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <FooContext.Provider value={foo}>\n        <BarContext.Provider value={bar}>\n          <div>\n            <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n          </div>\n          <div>{props.children}</div>\n        </BarContext.Provider>\n      </FooContext.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => {\n  const value = React.useContext(FooContext);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>ConsumerFoo: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ConsumerBar: React.FC = React.memo(() => {\n  const value = React.useContext(BarContext);\n\n  return (\n    <RenderCounter color=\"red\">\n      <code>ConsumerBar: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ContextSeparate = () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n\nexport default ContextSeparate;\n","import {\n  createContext,\n  useContextSelector,\n} from '@fluentui/react-context-selector';\nimport React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = { foo: number; bar: number };\n\nconst Context = createContext<ContextValue>({ foo: 0, bar: 0 });\n\nconst Provider: React.FC<{ foo: number; bar: number }> = (props) => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={{ foo, bar }}>\n        <div>\n          <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => {\n  const value = useContextSelector(Context, (v) => v.foo);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>\n        ConsumerFoo (listens for <code>foo</code>):{' '}\n        {JSON.stringify(value, null, 2)}\n      </code>\n    </RenderCounter>\n  );\n});\n\nconst ConsumerBar: React.FC = React.memo(() => {\n  const value = useContextSelector(Context, (v) => v.bar);\n\n  return (\n    <RenderCounter color=\"red\">\n      <code>\n        ConsumerBar (listens for <code>bar</code>):{' '}\n        {JSON.stringify(value, null, 2)}\n      </code>\n    </RenderCounter>\n  );\n});\n\nconst ContextSelector = () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n\nexport default ContextSelector;\n","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport { useForceUpdate } from '../../hooks/useForceUpdate';\n\ntype ContextValue = { value: number };\nconst Context = React.createContext<ContextValue>({ value: 1 });\n\nconst Provider: React.FC = (props) => {\n  const value = { value: 1 };\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={value}>\n        <div>\n          <code>Provider: {JSON.stringify(value, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst Consumer: React.FC = React.memo(() => {\n  const value = React.useContext(Context);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>Consumer: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ContextUnmemoized = () => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <Provider>\n        <Consumer />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n\nexport default ContextUnmemoized;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport ContextChangedBits from '../examples/context/ContextChangedBits';\nimport ContextMemoized from '../examples/context/ContextMemoized';\nimport ContextSeparate from '../examples/context/ContextSeparate';\nimport ContextSelector from '../examples/context/ContextSelector';\nimport ContextUnmemoized from '../examples/context/ContextUnmemoized';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Context`}</h2>\n    <p>{`This page covers only modern React Context API, i.e. `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}><inlineCode parentName=\"a\">{`createContext()`}</inlineCode></a>{`.`}</p>\n    <h3>{`Context behavior`}</h3>\n    <p>{`All consumers that are descendants of a `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` will re-render whenever the `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`’s `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop changes. The propagation from `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` to its descendant consumers (including `}<inlineCode parentName=\"p\">{`.contextType`}</inlineCode>{` on class components and `}<inlineCode parentName=\"p\">{`useContext()`}</inlineCode>{` hook) is not subject to the `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` method or `}<inlineCode parentName=\"p\">{`React.memo()`}</inlineCode>{`, so the consumer is updated even when an ancestor component skips an update.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// 💡 React.memo will ignored\nconst Example = React.memo((props) => {\n  // 💣 Updates will be triggered inside\n  const value = React.useContext(Context);\n\n  return <div />;\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Examples and info is taken from the official `}<a parentName=\"p\" {...{\n          \"href\": \"https://reactjs.org/docs/context.html#caveats\"\n        }}>{`ReactJS`}</a>{` documentation.`}</p>\n    </blockquote>\n    <p>{`Context uses reference identity to determine when to re-render, there are some gotchas that could trigger\nunintentional renders in consumers when a provider’s parent re-renders.\nFor example, the code below will re-render all consumers every time the Provider re-renders\nbecause a new object is always created for value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`class Example extends React.Component {\n  state = { value: 1 };\n\n  render() {\n    const { children } = this.props;\n\n    // ⛔ ({ value: 1 } === { value: 1 }) is false, so reference is different\n    return <Provider value={{ value: this.state.value }}>{children}</Provider>;\n  }\n}\n`}</code></pre>\n    <p>{`To get around this, lift the value into the parent’s state:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`class Example extends React.Component {\n  state = { value: 1 };\n\n  render() {\n    const { children } = this.props;\n\n    return <Provider value={this.state.value}>{children}</Provider>;\n  }\n}\n`}</code></pre>\n    <ContextUnmemoized mdxType=\"ContextUnmemoized\" />\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong>{`: if context value is constant, then having a static value is fine, no even need to use `}<inlineCode parentName=\"p\">{`useMemo()`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h3>{`Solution 1: Use memoized context value`}</h3>\n    <p>{`If value is changing rarely is good option to memoize an object value with `}<inlineCode parentName=\"p\">{`useMemo()`}</inlineCode>{` hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = (props) => {\n  const { children, value } = props;\n  // ✅ Now new \\`context\\` will be recreated only on \\`value\\` change\n  const context = React.useMemo(() => ({ value }), [value]);\n\n  return <Provider value={context}>{children}</Provider>;\n};\n`}</code></pre>\n    <ContextMemoized mdxType=\"ContextMemoized\" />\n    <p>{`For class components you can use `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{` as was mentioned above.`}</p>\n    <h3>{`Solution 2: Use separate contexts`}</h3>\n    <p>{`This trick was `}<a parentName=\"p\" {...{\n        \"href\": \"https://kentcdodds.com/blog/how-to-use-react-context-effectively\"\n      }}>{`described`}</a>{` by Kent Dodds. The idea is to pass plain/memoized\nvalues in separate contexts to avoid useless notifications to subscribers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = (props) => {\n  const { children } = props;\n\n  // ❗ both values are plain and safe for shallow compare\n  const firstValue = 1;\n  const secondValue = 2;\n\n  return (\n    <FirstProvider value={firstValue}>\n      <SecondProvider value={secondValue}>{children}</SecondProvider>\n    </FirstProvider>\n  );\n};\n`}</code></pre>\n    <ContextSeparate mdxType=\"ContextSeparate\" />\n    <h3>{`Solution 3: Use context selectors`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@fluentui/react-context-selector\"\n      }}>{`@fluentui/react-context-selector`}</a>{` implements `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reactjs/rfcs/pull/119\"\n      }}>{`context selectors RFC`}</a>{`. This package provides `}<inlineCode parentName=\"p\">{`useContextSelector()`}</inlineCode>{` hook allows to subscribe only to required updates.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const App = props => {\n  const { children } = props;\n  const { foo: 1, bar: 2 } = value;\n\n  return (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  );\n};\n\nconst Consumer = props => {\n  // ✅ Only updates that satisfy the selector will trigger the component's rerender\n  const foo = useContextSelector(Context, v => v.foo);\n\n  // do other things...\n}\n`}</code></pre>\n    <ContextSelector mdxType=\"ContextSelector\" />\n    <h3>{`Solution 4: Experimental bits API`}</h3>\n    <p>{`React provides an experimental API with `}<inlineCode parentName=\"p\">{`calculateChangedBits`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`calculateChangedBits`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function createContext<T>(defaultValue: T, calculateChangedBits?: (prev: T, next: T) => number): Context<T>;\nfunction useContext<T>(context: Context<T>, observedBits?: number|boolean): T;\n`}</code></pre>\n    <p>{`Which allows to change default behavior of Context API and avoid useless rerenders. As it's experimental there are no official docs yet, check `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\"\n      }}>{`this article`}</a>{` to get more details.`}</p>\n    <p><inlineCode parentName=\"p\">{`changedBits === 0`}</inlineCode>{` has a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/react/blob/9b0bd43550206e04bfe9ca695e5981eff0e2d03f/packages/react-reconciler/src/ReactFiberBeginWork.js#L2304\"\n      }}>{`special handling`}</a>{` in `}<inlineCode parentName=\"p\">{`react-reconciler`}</inlineCode>{`, so one of the most interesting tricks is to disable any consumer's updates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// ☠️ Even is \\`value\\` will change updates will be silenced\nconst Context = React.createContext(value, () => 0);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`changedBits`}</inlineCode>{` API cannot be used with `}<inlineCode parentName=\"p\">{`useContext()`}</inlineCode>{` hook as will produce a warning:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Warning: useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: 1.`}</p>\n    </blockquote>\n    <p>{`The actual usage of `}<inlineCode parentName=\"p\">{`changedBits`}</inlineCode>{` is more complex:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Context = React.createContext(value, (prev, next) => {\n  // 💡 This context handles only changes on \\`value.foo\\`\n  if (prev.foo !== next.foo) {\n    return 1;\n  }\n\n  // 🛎️ Will silence all other updates, i.e. they will not be propogated to context consumers\n  return 0;\n});\n\nconst App = props => {\n  const { children } = props;\n  const { foo: 1, bar: 2 } = value;\n\n  return (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  );\n};\n\nconst Consumer = props => {\n  // 🧱 Listen only for \\`1\\` bit changes\n  return <Context.Consumer unstable_observedBits={1}>{value => null}</<Context.Consumer>\n}\n`}</code></pre>\n    <ContextChangedBits mdxType=\"ContextChangedBits\" />\n    <p>{`There is also a lot of custom context/global state implementations, comparison\nfor Concurrent mode `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-mode\"\n      }}>{`available there`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`State Immutability in React, why it is important, and how to achieve it using Immer`}</h2>\n    <p>{`React `}<em parentName=\"p\">{`props`}</em>{` and `}<em parentName=\"p\">{`state`}</em>{` are readonly by contract; it is, however, very easy to break this contract\nand introduce issues that are difficult to debug. In order to prevent these issues it is advised not\nto mutate state unless necessary. If non-trivial mutation of the current state is unvoidable, it is\nadvised to use an immutability helper called Immer.`}</p>\n    <p>{`In the text below we start with a piece of code\nthat doesn't work, we transform it into code that works, but is error-prone and unreadable, and eventually\nwe reach the state of well readable and easily maintainable code. As we go over these phases\nwe gradually build a case for using Immer.`}</p>\n    <h3>{`State mutation outside of setState mechanism`}</h3>\n    <p>{`React `}<em parentName=\"p\">{`state`}</em>{` is declared readonly, but that only means that the `}<em parentName=\"p\">{`reference`}</em>{` to it is constant. This\neffectively protects primitives from being changed, but it doesn't protect objects. The only sound\nmeans of state change in React is the `}<em parentName=\"p\">{`setState`}</em>{` method and any code that asserts it is correct in doing so.\nIn the example below, the `}<em parentName=\"p\">{`sumData`}</em>{` function rightfully asserts that the state object will not change\nand based on that it caches its output based on the state object's internal field \"data\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const data = state.data;\n  const sumData = React.useCallback(\n    () => data.reduce((acc, val) => acc + val, 0),\n    [data]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is out of sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({ data: state.data });\n  };\n`}</code></pre>\n    <p>{`However, the `}<em parentName=\"p\">{`run`}</em>{` function changes the state object -- its internal field `}<em parentName=\"p\">{`data`}</em>{` now points to a\ndifferent address. `}<em parentName=\"p\">{`sumData`}</em>{` captures the original address (that wasn't supposed to change), and therefore\nit will sum the original data.`}</p>\n    <p>{`The logical step in rectifying this seems to be to make `}<em parentName=\"p\">{`sumData`}</em>{` capture the entire state -- since it is\nreadonly we will be sure that we always refer to the correct address. It also seemingly makes sense not to construct\na new state object in `}<em parentName=\"p\">{`run`}</em>{` since we only change a single field inside of it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is in sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState(state);\n  };\n`}</code></pre>\n    <p>{`The issue with this change is that now it doesn't work at all, because React asserts that since the\naddress of the state object hasn't changed, the object itself hasn't changed, and it will ignore the\nsetState call. The obvious solution is to copy the object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    state.data = [1, 1];\n    // Contract violation.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({...state});\n  };\n`}</code></pre>\n    <p>{`Now the code will work. The issue with this code, however, is that it is breaking the immutability contract\nwith React and that it is prone to error. If the state object were to consist of multiple nested fields,\nwe would have to make sure that the object is copied properly to form a new state. Since there is no native\nconcept of \"deep copy\" in javascript, doing this can be rather cumbersome:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = (props) => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(\n    () => JSON.stringify(state),\n    [state]\n  );\n\n  const updateJillsStreet = () => {\n    // It is easy to get lost in this sea of spread operators and brackets.\n    setState((prevState) => ({\n      people: [\n        { ...prevState.people[0] },\n        {\n          ...prevState.people[1],\n          addresses: [\n            {\n              ...prevState.people[1].addresses[0],\n              street: \\`Street \\${Math.random()}\\`,\n            },\n          ],\n        },\n      ],\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <h3>{`Immer.js to the rescue`}</h3>\n    <p>{`And that is when Immer.js comes to the rescue. Immer.js uses ES6 proxies (note that when transcompiled to ES5\nit will become much slower) to record changes to a so called `}<em parentName=\"p\">{`draft`}</em>{` object during the execution of the `}<em parentName=\"p\">{`produce`}</em>{`\nfunction and then project them onto a new object that becomes the new state. The `}<em parentName=\"p\">{`draft`}</em>{` object is based on the existing\nstate that is passed to the `}<em parentName=\"p\">{`produce`}</em>{` function along with the draft callback. The following snippet demonstrates\nhow we go from cumbersome, ugly, and ureadable to straightforward, beautiful, and well readable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = (props) => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(\n    () => JSON.stringify(state),\n    [state]\n  );\n\n  const updateJillsStreet = () => {\n    setState(\n      produce(state, (_draft) => {\n        _draft.people[1].addresses[0].street = \\`Street \\${Math.random()}\\`;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`This can be further simplified by using the `}<em parentName=\"p\">{`use-immer`}</em>{` npm package that provides us with a hook\nthat combines the native `}<em parentName=\"p\">{`React.useState`}</em>{` and Immer's `}<em parentName=\"p\">{`produce`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = (props) => {\n  const [state, setState] = useImmer(getCumbersomeState());\n\n  const getStateString = React.useCallback(\n    () => JSON.stringify(state),\n    [state]\n  );\n\n  const updateJillsStreet = () => {\n    setState((_draft) => {\n      _draft.people[1].addresses[0].street = \\`Street \\${Math.random()}\\`;\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`In the newly created state, fields that didn't change during the execution of the draft callback\nwill be referentially equal to the fields in the original state. Only fields that were changed\nin the draft and the root object will be new objects.`}</p>\n    <h3>{`Resources`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://immerjs.github.io/immer/docs/introduction\"\n        }}>{`https://immerjs.github.io/immer/docs/introduction`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Useful Links`}</h2>\n    <h3>{`Common Topics`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/getting-started.html\"\n        }}>{`React JS`}</a>{` - the official ReactJS documentation.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\"\n        }}>{`React+TypeScript Cheatsheets`}</a>{` - Cheatsheets for experienced React developers getting started with TypeScript`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/codeartistryio/the-react-cheatsheet-for-2020-real-world-examples-4hgg\"\n        }}>{`The React Cheatsheet for 2020 📄‬`}</a>{` - The React Cheatsheet for 2020 📄‬ (+ real-world examples).`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reactpatterns.com/\"\n        }}>{`React Patterns`}</a>{` - Get the latest React patterns, tips, and tricks right to your inbox.`}</li>\n    </ul>\n    <h3>{`Hooks`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/n1ru4l/homebrew-react-hooks-useasynceffect-or-how-to-handle-async-operations-with-useeffect-1fa8\"\n        }}><inlineCode parentName=\"a\">{`useEffect()`}</inlineCode></a>{` with async call.`}</li>\n    </ul>\n    <h3>{`Performance`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://css-tricks.com/how-react-reconciliation-works/\"\n        }}>{`How React Reconciliation Works`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Generic Guides`}</h2>\n    <p>{`Here you can find a collection of useful guides how to use hooks.`}</p>\n    <h3>{`How to do side effect on user action`}</h3>\n    <p>{`Sometimes there is need to execute some side effect while triggering user action.\nFor example, you need to send request when user press a button. Or more generic,\nyou need to set state inside a callback. If setting state requires the original value of state,\nthe code should use the variant of `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{` that passes state as argument.`}</p>\n    <p>{`I this case you can do the following thing, example is taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/questions/55647287/how-to-send-request-on-click-react-hooks-way\"\n      }}>{`StackOverflow`}</a>{`\nwith some minor changes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const SomeComponent = () => {\n  const [isSending, setIsSending] = useState(false);\n  const isMounted = useRef(true);\n\n  // set isMounted to false when we unmount the component\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const sendRequest = useCallback(async () => {\n    // ⛔ don't send again while we are sending\n    if (isSending) {\n      return;\n    }\n    // update state\n    setIsSending(true);\n\n    try {\n    // send the actual request\n    await API.sendRequest();\n    catch (err) {\n      // ❗ properly handle error\n    }\n\n    // once the request is sent, update state again\n    if (isMounted.current) {\n      // only update if we are still mounted\n      setIsSending(false);\n    }\n  }, [isSending]); // ✅ update the callback if the state changes\n\n  return <input type=\"button\" disabled={isSending} onClick={sendRequest} />;\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`When worlds collide: React hooks + RenderProps`}</h2>\n    <p>{`Function Components are awesome and so are React hooks. While we continue to adopt them in our code,\nwe need to be aware of certain gotchas when you cross `}<inlineCode parentName=\"p\">{`FunctionComponents`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`RenderProps`}</inlineCode>{`.`}</p>\n    <p>{`Before hooks, `}<inlineCode parentName=\"p\">{`RenderProps`}</inlineCode>{` allowed you to compose behaviors using reusable React components.\nTake the following code as an example: (Yes you can write this in a different way using hooks,\nbut this example is intentional)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Animal = ({ name, body }) => {\n  return <Box>{body({ name })}</Box>;\n};\n\nconst Biped = ({ name }) => <Legs keys={name} count={2} />;\nconst Quadruped = ({ name }) => <Legs key={name} count={4} />;\n`}</code></pre>\n    <p>{`Now we can describe different animals:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Dog = () => <Animal name=\"dog\" body={Quadruped} />;\nconst Cat = () => <Animal name=\"cat\" body={Quadruped} />;\nconst Human = () => <Animal name=\"human\" body={Biped} />;\nconst Ostrich = () => <Animal name=\"ostrich\" body={Biped} />;\n`}</code></pre>\n    <p>{`So far so good. Notice the syntax in supplying the body. If you break it down, it is similar to doing something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Dog = () => (\n  <Animal name=\"dog\" body={({ name }) => <Legs keys={name} count={4} />} />\n);\n`}</code></pre>\n    <p>{`The only reason not to do the above is that we want to control our re-renders by maintaining the referential identity\nof body. So before we begin on the main topic, let's quickly look at the difference between `}<strong parentName=\"p\">{`Calling`}</strong>{` and `}<strong parentName=\"p\">{`Rendering`}</strong>{`.`}</p>\n    <h3>{`Rendering`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Quadruped`}</inlineCode>{` component above looks like a `}<inlineCode parentName=\"p\">{`Function Component`}</inlineCode>{` that takes `}<em parentName=\"p\">{`a single prop`}</em>{`.\nSo naturally it makes sense to have the developer of `}<inlineCode parentName=\"p\">{`Animal`}</inlineCode>{` to think that you can use the `}<inlineCode parentName=\"p\">{`<Component />`}</inlineCode>{`\nsyntax aka `}<strong parentName=\"p\">{`Rendering`}</strong>{` to render the component. So case in point:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Animal = ({ name, body: Body }) => {\n  return (\n    <Box>\n      <Body name={name} />\n    </Box>\n  );\n};\n`}</code></pre>\n    <p>{`So far this works just fine, but what if the consumer decided to do define the body property inline, i.e.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Dog = () => (\n  <Animal name=\"dog\" body={({ name }) => <Legs keys={name} count={4} />} />\n);\n`}</code></pre>\n    <p>{`Now your constructor of the body component i.e. `}<strong parentName=\"p\">{`Body`}</strong>{` is going to be a different function on every render.\nThis means irrespective of whether the underlying DOM/Logic has changed or not, your React component is going\nto be destroyed (unmounted) and recreated (mounted) on every render as reconciliation states that,\nif the constructor changes, then re-create it. This is because when you do `}<inlineCode parentName=\"p\">{`<Body />`}</inlineCode>{` you are basically\ninvoking `}<inlineCode parentName=\"p\">{`React.createElement`}</inlineCode>{` which will return a different `}<inlineCode parentName=\"p\">{`\\\\$\\\\$type`}</inlineCode>{` on every render as the constructors are different.`}</p>\n    <h3>{`Ok so may be we'll stick to the Calling syntax?`}</h3>\n    <p>{`Let's roll back to the old way of coding Animal which is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Animal = ({ name, body }) => {\n  return <Box>{body({ name })}</Box>;\n};\n`}</code></pre>\n    <p>{`Now even if the consumer specifies the function inline it won't matter as we aren't rendering the component\n`}<em parentName=\"p\">{`but rather rendering the return value`}</em>{` of the component, which happens to be a ReactNode.`}</p>\n    <p>{`Now consider the type of the body prop. You can say that it looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`body: ({ name }: { name: string }) => JSX.Element;\n`}</code></pre>\n    <p>{`which in other works is equivalent of reading it as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`body: React.FunctionComponent<{ name: string }>\n`}</code></pre>\n    <p>{`So what if a new consumer decides to do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Quadruped = ({ name }) => {\n  useEffect(() => {\n    console.log('Mounting a Quadruped');\n  }, []);\n\n  return <Legs key={name} count={4} />;\n};\n\nconst Elephant = () => <Animal name=\"elephant\" body={Quadruped} />;\n`}</code></pre>\n    <p>{`How many times do you think it will log the above `}<inlineCode parentName=\"p\">{`console.log`}</inlineCode>{` for a single `}<strong parentName=\"p\">{`Elephant`}</strong>{` used only once?\n`}<em parentName=\"p\">{`If the answer is more than one, you are correct`}</em>{`. Though the developer was definitely not expecting that.`}</p>\n    <p>{`This is case when you use hooks in that above example, remember that the developer of `}<inlineCode parentName=\"p\">{`Animal`}</inlineCode>{` wasn't thinking\nof it as a React component and was consider it a function. Which means he/she never rendered it,\nwhich means that the hook `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` was being called inline. That is similar to having done something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Elephant = () =>\n  <Animal name=\"elephant\" body={{\n    ({ name }) => {\n      // ESLINT-ERROR: RULES OF HOOKS\n      useEffect(() => {\n        console.log(\"Mounting a Quadruped\")\n      }, []);\n\n      return <Legs key={name} count={4} />\n    }}\n  } />\n`}</code></pre>\n    <p>{`As you see above when you try to code this. You get an `}<strong parentName=\"p\">{`eslint`}</strong>{` warning. The main reason this is bad is that,\n`}<strong parentName=\"p\">{`hooks`}</strong>{` or rather the state for hooks and their order don't live in the React tree. They live in a global\ncorresponding to each node of a the React tree. The way the state associated with a hook is identified is by\nusing the component's constructor reference. Same reason as before, that we can't `}<strong parentName=\"p\">{`render`}</strong>{` these components,\nwe can't have hooks in them. So what's the solution to the above problem:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const Elephant = () => (\n  <Animal name=\"elephant\" body={({ name }) => <Quadruped name={name} />} />\n);\n`}</code></pre>\n    <p>{`wordy... but it `}<em parentName=\"p\">{`merges the worlds of RenderProps and Hooks`}</em>{`.`}</p>\n    <h3>{`Using TypeScript to catch these upfront`}</h3>\n    <p>{`Developers of the component that accept render props, in this case the person who wrote `}<inlineCode parentName=\"p\">{`Animal`}</inlineCode>{`,\nshould type their components as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`body: ({ name: string }) => React.ReactNode; // not JSX.Element\n`}</code></pre>\n    <p>{`This specifically tells TypeScript that you can't render this component as `}<inlineCode parentName=\"p\">{`<body />`}</inlineCode>{` and neither can you supply\na `}<inlineCode parentName=\"p\">{`React.ComponentClass`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`React.FunctionComponent`}</inlineCode>{` to the body argument.`}</p>\n    <p>{`If you want to support `}<strong parentName=\"p\">{`rendering`}</strong>{` and are going to invoke it as such, then please type it as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`body: React.ComponentType<{name: string}>\n`}</code></pre>\n    <p>{`As always, if you can avoid being in this state by either using only hooks or renderProps, that's even better :).`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Memoization`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <Link to=\"/react-memo\" mdxType=\"Link\">React.memo()</Link> - the component memoization\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport { TProps, TValue } from './common';\n\nexport const MemoizedComponent: FC<TProps> = (props) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n  const ctx = useContext();\n\n  const changeInterestedContextValue = () => {\n    ctx.imInterestedInThisChange += 1;\n  };\n\n  const changeNotInterestedContextValue = () => {\n    ctx.imNotInterestedInThisChange += 1;\n  };\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container: {value}</p>\n      {props.isMemoized ? (\n        <ChildFunctionComponentMemoizedWithContext value={value} />\n      ) : (\n        <ChildFunctionComponentWithContext value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n      <button onClick={changeInterestedContextValue}>\n        Change interested context value\n      </button>\n      <button onClick={changeNotInterestedContextValue}>\n        Change not interested context value\n      </button>\n    </RenderCounter>\n  );\n};\n\ntype ContextValue = {\n  imInterestedInThisChange: number;\n  imNotInterestedInThisChange: number;\n};\nconst Context = React.createContext<ContextValue>({\n  imInterestedInThisChange: 1,\n  imNotInterestedInThisChange: 1,\n});\nconst useContext = () => React.useContext(Context);\n\nconst ChildFunctionComponentWithContext: FC<TValue> = (props: TValue) => {\n  const { imInterestedInThisChange, imNotInterestedInThisChange } =\n    useContext();\n\n  return (\n    <RenderCounter color=\"blue\">\n      <p>Child Function Component: {props.value}</p>\n      <p>I'm interested in this change: {imInterestedInThisChange}</p>\n      <p>\n        I'm <strong>not</strong> interested in this change:{' '}\n        {imNotInterestedInThisChange}\n      </p>\n    </RenderCounter>\n  );\n};\n\nconst ChildFunctionComponentMemoizedWithContext: FC<TValue> = React.memo<\n  FC<TValue>\n>((props: TValue) => {\n  const { imInterestedInThisChange, imNotInterestedInThisChange } =\n    useContext();\n\n  return (\n    <RenderCounter color=\"blue\">\n      <p>\n        Child Function Component <strong>Memoized</strong>: {props.value}\n      </p>\n      <p>I'm interested in this change: {imInterestedInThisChange}</p>\n      <p>\n        I'm <strong>not</strong> interested in this change:{' '}\n        {imNotInterestedInThisChange}\n      </p>\n    </RenderCounter>\n  );\n});\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { MemoizedComponent } from '../examples/components/Memoization';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`React.memo() - no context change`}</h2>\n    <h3>{`Memoized (no context changes)`}</h3>\n    <MemoizedComponent isMemoized={true} mdxType=\"MemoizedComponent\" />\n    <h3>{`Non-Memoized`}</h3>\n    <MemoizedComponent isMemoized={false} mdxType=\"MemoizedComponent\" />\n    <hr></hr>\n    <h2>{`React.memo() - non-related context change happens`}</h2>\n    <h3>{`Memoized (no context changes)`}</h3>\n    <MemoizedComponent isMemoized={true} mdxType=\"MemoizedComponent\" />\n    <h3>{`Non-Memoized`}</h3>\n    <MemoizedComponent isMemoized={false} mdxType=\"MemoizedComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\nimport { HashRouter as Router, Routes, Route, Link } from 'react-router-dom';\n\nimport Overview from './pages/Overview.mdx';\nimport Components from './pages/Components.mdx';\nimport ClassComponent from './pages/ClassComponent.mdx';\nimport PureComponent from './pages/PureComponent.mdx';\nimport FunctionComponent from './pages/FunctionComponent.mdx';\nimport MethodComponent from './pages/MethodComponent.mdx';\nimport Hooks from './pages/Hooks.mdx';\nimport UseCallbackHook from './pages/UseCallback.mdx';\nimport UseEffectHook from './pages/UseEffect.mdx';\nimport UseStateHook from './pages/UseState.mdx';\nimport Context from './pages/Context.mdx';\nimport Immutability from './pages/Immutability.mdx';\nimport Links from './pages/Links.mdx';\nimport GenericHookGuides from './pages/GenericHookGuides.mdx';\nimport HooksRenderProps from './pages/HooksRenderProps.mdx';\nimport Memoization from './pages/Memoization.mdx';\nimport ReactMemo from './pages/ReactMemo.mdx';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"wrapper\">\n        <header>\n          <h1>React Patterns</h1>\n        </header>\n        <div className=\"main\">\n          <aside>\n            <ul>\n              <li>\n                <Link to=\"/\">Overview</Link>\n              </li>\n              <li>\n                <Link to=\"/components\">Components</Link>\n                <ul>\n                  <li>\n                    <Link to=\"/class-component\">Class Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/pure-component\">Pure Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/function-component\">Function Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/method-component\">Method Component</Link>\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <Link to=\"/hooks\">Hooks</Link>\n                <ul>\n                  <li>\n                    <Link to=\"/generic-hook-guides\">Generic Guide</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/hook-use-state\">useState</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/hook-use-callback\">useCallback</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/hook-use-effect\">useEffect</Link>\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <Link to=\"/memoization\">Memoization</Link>\n                <ul>\n                  <li>\n                    <Link to=\"/react-memo\">React.memo()</Link>\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <Link to=\"/hooks-render-props\">React hooks + RenderProps</Link>\n              </li>\n              <li>\n                <Link to=\"/context\">Context</Link>\n              </li>\n              <li>\n                <Link to=\"/immutability\">Immutability</Link>\n              </li>\n              <li>\n                <Link to=\"/links\">Links</Link>\n              </li>\n            </ul>\n          </aside>\n          <main>\n            <React.Suspense fallback={<div>Loading...</div>}>\n              <Routes>\n                <Route path=\"/components\" element={<Components />} />\n                <Route path=\"/class-component\" element={<ClassComponent />} />\n                <Route path=\"/pure-component\" element={<PureComponent />} />\n                <Route\n                  path=\"/function-component\"\n                  element={<FunctionComponent />}\n                />\n                <Route path=\"/method-component\" element={<MethodComponent />} />\n                <Route path=\"/hooks\" element={<Hooks />} />\n                <Route\n                  path=\"/generic-hook-guides\"\n                  element={<GenericHookGuides />}\n                />\n                <Route path=\"/hook-use-state\" element={<UseStateHook />} />\n                <Route\n                  path=\"/hook-use-callback\"\n                  element={<UseCallbackHook />}\n                />\n                <Route path=\"/hook-use-effect\" element={<UseEffectHook />} />\n\n                <Route path=\"/memoization\" element={<Memoization />} />\n                <Route path=\"/react-memo\" element={<ReactMemo />} />\n\n                <Route\n                  path=\"/hooks-render-props\"\n                  element={<HooksRenderProps />}\n                />\n                <Route path=\"/context\" element={<Context />} />\n                <Route path=\"/immutability\" element={<Immutability />} />\n                <Route path=\"/links\" element={<Links />} />\n                <Route path=\"/\" element={<Overview />} />\n              </Routes>\n            </React.Suspense>\n          </main>\n        </div>\n        <footer>\n          <div className=\"git-hub\">\n            <a href=\"https://github.com/smykhailov/react-patterns\">\n              <img src=\"GitHub-Mark-32px.png\" alt=\"GitHub Logo\" />\n            </a>\n          </div>\n          <div className=\"copyright\">\n            <a href=\"https://github.com/smykhailov/react-patterns\">\n              React Patterns\n            </a>\n          </div>\n        </footer>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import Code from './Code';\n\nconst code = {\n  code: Code,\n};\n\nexport default code;\n","import Highlight, { defaultProps, Language } from 'prism-react-renderer';\nimport React from 'react';\n\nimport 'prism-themes/themes/prism-vs.css';\n\n// TODO: use typings when MDX2 will be released\ntype CodeProps = {\n  className?: string;\n  children?: string;\n};\n\nconst Code: React.FC<CodeProps> = (props) => {\n  const { className = 'language-jsx', children = '' } = props;\n  const language: Language = className.replace('language-', '') as any;\n  const code = children.replace(/\\n$/, '');\n\n  return (\n    <>\n      {/* CSS fix for empty lines */}\n      <style>{`.prism-code .token.plain { display: inline-block; }`}</style>\n      <style>{`.prism-code .token.comment { font-style: normal; }`}</style>\n\n      <Highlight\n        {...defaultProps}\n        code={code}\n        language={language}\n        theme={undefined} // CSS theme is used\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={{ ...style, padding: 3 }}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </>\n  );\n};\n\nexport default Code;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// @ts-ignore\nimport { MDXProvider } from '@mdx-js/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Typography from 'typography';\n// @ts-ignore\nimport githubTheme from 'typography-theme-github';\n\nimport App from './app';\nimport components from './components/mdx';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst typography = new Typography(githubTheme);\ntypography.injectStyles();\n\nReactDOM.render(\n  <MDXProvider components={components}>\n    <App />\n  </MDXProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}